import kotlin.random.Random

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val RED = "\u001b[31m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val BLUE = "\u001b[34m"
const val MAGENTA = "\u001b[35m"
const val CYAN = "\u001b[36m"
const val BG_GRAY = "\u001b[100m"

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const val WIDTH = 10
const val HEIGHT = 20

// –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const val START_TICK_MS = 7000
const val MIN_TICK_MS = 100  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
const val ACCELERATION = 50  // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 500 –æ—á–∫–æ–≤

// –í—Å–µ —Ñ–∏–≥—É—Ä—ã (—Ç–µ—Ç—Ä–æ–º–∏–Ω–æ)
val SHAPES = listOf(
    listOf( // I
        listOf(1, 1, 1, 1)
    ),
    listOf( // O
        listOf(1, 1),
        listOf(1, 1)
    ),
    listOf( // T
        listOf(0, 1, 0),
        listOf(1, 1, 1)
    ),
    listOf( // L
        listOf(1, 0),
        listOf(1, 0),
        listOf(1, 1)
    ),
    listOf( // J
        listOf(0, 1),
        listOf(0, 1),
        listOf(1, 1)
    ),
    listOf( // S
        listOf(0, 1, 1),
        listOf(1, 1, 0)
    ),
    listOf( // Z
        listOf(1, 1, 0),
        listOf(0, 1, 1)
    )
)

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ñ–∏–≥—É—Ä
val COLORS = listOf(CYAN, YELLOW, MAGENTA, RED, GREEN, BLUE, BG_GRAY)

fun main() {
    println("$CYAN=== üéÆ –¢–ï–¢–†–ò–° PRO ===$RESET")
    println("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: A=–≤–ª–µ–≤–æ, D=–≤–ø—Ä–∞–≤–æ, S=–≤–Ω–∏–∑, W=–ø–æ–≤–æ—Ä–æ—Ç, Q=–≤—ã—Ö–æ–¥")

    val board = Array(HEIGHT) { CharArray(WIDTH) { ' ' } }
    var score = 0
    var lines = 0
    var level = 1
    var gameOver = false

    // –ü–µ—Ä–≤–∞—è "—Å–ª–µ–¥—É—é—â–∞—è" —Ñ–∏–≥—É—Ä–∞
    var nextShape = SHAPES.random()
    var nextColor = COLORS[SHAPES.indexOf(nextShape)]

    while (!gameOver) {
        // –¢–µ–∫—É—â–∞—è —Ñ–∏–≥—É—Ä–∞ = —Å–ª–µ–¥—É—é—â–∞—è
        val shape = nextShape
        val color = nextColor

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é "—Å–ª–µ–¥—É—é—â—É—é"
        nextShape = SHAPES.random()
        nextColor = COLORS[SHAPES.indexOf(nextShape)]

        var row = 0
        var col = WIDTH / 2 - shape[0].size / 2
        var rotated = shape

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        val tickMs = calculateSpeed(score)

        while (true) {
            if (!canPlace(board, rotated, row, col)) {
                if (row <= 0) {
                    gameOver = true
                    break
                } else {
                    place(board, rotated, row - 1, col, color)
                    break
                }
            }

            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞
            printBoardWithPreview(board, rotated, row, col, color, nextShape, nextColor, score, level)

            // –í–≤–æ–¥ –∏ —Ç–∏–∫
            var moved = false
            val start = System.currentTimeMillis()
            while (System.currentTimeMillis() - start < tickMs) {
                if (System.`in`.available() > 0) {
                    when (readLine()?.trim()?.lowercase()) {
                        "a" -> if (canPlace(board, rotated, row, col - 1)) col-- else Unit
                        "d" -> if (canPlace(board, rotated, row, col + 1)) col++ else Unit
                        "s" -> if (canPlace(board, rotated, row + 1, col)) row++ else Unit
                        "w" -> {
                            val rotatedNew = rotate(rotated)
                            if (canPlace(board, rotatedNew, row, col)) rotated = rotatedNew
                        }
                        "q" -> {
                            println("$RED –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.$RESET")
                            return
                        }
                    }
                    moved = true
                }
                if (moved) break
                Thread.sleep(50)
            }

            row++
        }

        val cleared = removeFullLines(board)
        score += cleared * 100
        lines += cleared

        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        val newLevel = (score / 500) + 1
        if (newLevel > level) {
            level = newLevel
            println("$YELLOWüéâ –£—Ä–æ–≤–µ–Ω—å $level! –ò–≥—Ä–∞ —É—Å–∫–æ—Ä–∏–ª–∞—Å—å!$RESET")
            Thread.sleep(1000)
        }
    }

    println("$REDüíÄ –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!$RESET")
    println("$GREEN –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: $score$RESET")
    println("$BLUE –ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: $level$RESET")
}

// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è
fun calculateSpeed(score: Int): Int {
    val level = score / 500
    val speed = START_TICK_MS - level * ACCELERATION
    return maxOf(speed, MIN_TICK_MS)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
fun canPlace(board: Array<CharArray>, shape: List<List<Int>>, row: Int, col: Int): Boolean {
    for (i in shape.indices) {
        for (j in shape[i].indices) {
            if (shape[i][j] == 1) {
                val r = row + i
                val c = col + j
                if (r < 0 || r >= HEIGHT || c < 0 || c >= WIDTH || board[r][c] != ' ') {
                    return false
                }
            }
        }
    }
    return true
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
fun place(board: Array<CharArray>, shape: List<List<Int>>, row: Int, col: Int, color: String) {
    for (i in shape.indices) {
        for (j in shape[i].indices) {
            if (shape[i][j] == 1) {
                val r = row + i
                val c = col + j
                if (r in 0 until HEIGHT && c in 0 until WIDTH) {
                    board[r][c] = '‚ñà'
                }
            }
        }
    }
}

// –ü–æ–≤–æ—Ä–æ—Ç —Ñ–∏–≥—É—Ä—ã
fun rotate(shape: List<List<Int>>): List<List<Int>> {
    val n = shape.size
    val m = shape[0].size
    val rotated = MutableList(m) { MutableList<Int>(n) { 0 } }
    for (i in shape.indices) {
        for (j in shape[i].indices) {
            rotated[j][n - 1 - i] = shape[i][j]
        }
    }
    return rotated
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
fun removeFullLines(board: Array<CharArray>): Int {
    var lines = 0
    var i = HEIGHT - 1  // –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∏–∑—É

    while (i >= 0) {
        if (board[i].all { it == '‚ñà' }) {
            // –°–¥–≤–∏–≥–∞–µ–º –≤—Å—ë –≤–Ω–∏–∑
            for (j in i downTo 1) {
                board[j] = board[j - 1].copyOf()
            }
            board[0] = CharArray(WIDTH) { ' ' }
            lines++
            // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º i, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ –º–µ—Å—Ç–æ i –ø—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—ë –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        } else {
            i--  // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
        }
    }

    return lines
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—è + —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∏–≥—É—Ä—ã
fun printBoardWithPreview(
    board: Array<CharArray>,
    currentShape: List<List<Int>>,
    row: Int,
    col: Int,
    currentColor: String,
    nextShape: List<List<Int>>,
    nextColor: String,
    score: Int,
    level: Int
) {
    val preview = Array(HEIGHT) { CharArray(WIDTH) {
        val it2 = 0
        board[it][it2]
    } }

    // –†–∏—Å—É–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∏–≥—É—Ä—É
    for (i in currentShape.indices) {
        for (j in currentShape[i].indices) {
            if (currentShape[i][j] == 1) {
                val r = row + i
                val c = col + j
                if (r in 0 until HEIGHT && c in 0 until WIDTH) {
                    preview[r][c] = '‚ñà'
                }
            }
        }
    }

    // –í—ã–≤–æ–¥
    println()

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    print("  $CYAN –ü–æ–ª–µ$RESET")
    print(" ".repeat(WIDTH * 2 - 4))
    print("  $MAGENTA –°–ª–µ–¥—É—é—â–∞—è$RESET")
    println()

    // –ü–æ–ª–µ
    for (i in preview.indices) {
        print("  |")
        for (j in preview[i].indices) {
            print(if (preview[i][j] == '‚ñà') "$currentColor‚ñà$RESET " else "  ")
        }
        print("|  ")

        // –°–ª–µ–¥—É—é—â–∞—è —Ñ–∏–≥—É—Ä–∞ (–≤ 4 —Å—Ç—Ä–æ–∫–∞—Ö)
        if (i < 4) {
            for (j in 0..3) {
                if (j < nextShape.getOrNull(i)?.size ?: 0 && nextShape[i][j] == 1) {
                    print("$nextColor‚ñà$RESET ")
                } else {
                    print("  ")
                }
            }
        } else {
            print("    ")
        }
        println()
    }

    // –ù–∏–∑
    print("  ")
    for (i in 0 until WIDTH * 2 + 2) print("-")
    print("    ")
    for (i in 0..7) print("-")
    println()

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    println("  $YELLOW –°—á—ë—Ç: $score$RESET | $GREEN –£—Ä–æ–≤–µ–Ω—å: $level$RESET")
    println()
}
import java.util.*

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val RED = "\u001b[31m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val BG_GRAY = "\u001b[100m"

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const val WIDTH = 20
const val HEIGHT = 10
const val TICK_MS = 300 // —Å–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã (–º—Å)

fun main() {
    println("$CYAN=== üêç –ó–ú–ï–ô–ö–ê ===$RESET")
    println("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: W=–≤–≤–µ—Ä—Ö, A=–≤–ª–µ–≤–æ, S=–≤–Ω–∏–∑, D=–≤–ø—Ä–∞–≤–æ, Q=–≤—ã—Ö–æ–¥")

    // –ó–º–µ–π–∫–∞: —Å–ø–∏—Å–æ–∫ (—Å—Ç—Ä–æ–∫–∞, —Å—Ç–æ–ª–±–µ—Ü)
    var snake = listOf(Pair(HEIGHT / 2, WIDTH / 2))
    var direction = Pair(0, 1) // –≤–ø—Ä–∞–≤–æ
    var food = generateFood(snake)
    var score = 0
    var gameOver = false

    val scanner = Scanner(System.`in`)

    while (!gameOver) {
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞
        print("\u001b[2J\u001b[H") // –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤)
        printBoard(snake, food)
        println("$YELLOW –°—á—ë—Ç: $score$RESET")

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –≤–≤–æ–¥?
        var input: String? = null
        if (scanner.hasNextLine()) {
            input = scanner.nextLine().trim().lowercase()
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
        when (input) {
            "w" -> if (direction != Pair(1, 0)) direction = Pair(-1, 0)
            "s" -> if (direction != Pair(-1, 0)) direction = Pair(1, 0)
            "a" -> if (direction != Pair(0, 1)) direction = Pair(0, -1)
            "d" -> if (direction != Pair(0, -1)) direction = Pair(0, 1)
            "q" -> {
                println("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã.")
                return
            }
        }

        // –î–≤–∏–∂–µ–Ω–∏–µ –∑–º–µ–∏
        val head = snake.first()
        val newHead = Pair(head.first + direction.first, head.second + direction.second)

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–µ–Ω—É –∏ —Å–µ–±—è
        if (newHead.first !in 1 until HEIGHT - 1 ||
            newHead.second !in 1 until WIDTH - 1 ||
            newHead in snake) {
            println("$REDüíÄ –°–¢–û–õ–ö–ù–û–í–ï–ù–ò–ï!$RESET")
            println("$GREEN –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: $score$RESET")
            gameOver = true
            continue
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ–≤—É
        snake = listOf(newHead) + snake

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–¥—É
        if (newHead == food) {
            score += 10
            food = generateFood(snake)
        } else {
            snake = snake.dropLast(1) // —É–±–∏—Ä–∞–µ–º —Ö–≤–æ—Å—Ç
        }

        // –ü–∞—É–∑–∞ ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –∏–≥—Ä—ã
        Thread.sleep(TICK_MS.toLong())
    }

    scanner.close()
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—è
fun printBoard(snake: List<Pair<Int, Int>>, food: Pair<Int, Int>) {
    for (i in 0 until HEIGHT) {
        for (j in 0 until WIDTH) {
            // –ì—Ä–∞–Ω–∏—Ü—ã
            if (i == 0 || i == HEIGHT - 1 || j == 0 || j == WIDTH - 1) {
                print("$BG_GRAY‚ñà$RESET")
            }
            // –ì–æ–ª–æ–≤–∞ –∑–º–µ–∏
            else if (Pair(i, j) == snake.first()) {
                print("$GREEN‚ñà$RESET")
            }
            // –¢–µ–ª–æ –∑–º–µ–∏
            else if (Pair(i, j) in snake) {
                print("$GREEN¬∑$RESET")
            }
            // –ï–¥–∞
            else if (Pair(i, j) == food) {
                print("$RED‚óè$RESET")
            }
            // –ü—É—Å—Ç–æ
            else {
                print(" ")
            }
        }
        println()
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥—ã
fun generateFood(snake: List<Pair<Int, Int>>): Pair<Int, Int> {
    while (true) {
        val food = Pair(
            (1..HEIGHT - 2).random(),
            (1..WIDTH - 2).random()
        )
        if (food !in snake) return food
    }
}
import kotlin.random.Random

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val RED = "\u001b[31m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val BLUE = "\u001b[34m"
const val GRAY = "\u001b[90m"

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const val SIZE = 6

fun main() {
    println("$CYAN=== ‚öì –ú–û–†–°–ö–û–ô –ë–û–ô ===$RESET")
    println("–†–∞—Å—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ—Ä–∞–±–ª–∏: 3-–ø–∞–ª—É–±–Ω—ã–π, 2√ó2-–ø–∞–ª—É–±–Ω—ã—Ö, 4√ó1-–ø–∞–ª—É–±–Ω—ã—Ö")

    val playerBoard = Board()
    val botBoard = Board()

    // –ò–≥—Ä–æ–∫ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ—Ä–∞–±–ª–∏
    playerBoard.placeShipsManually()
    botBoard.placeShipsRandom()

    val playerShots = Array(SIZE) { BooleanArray(SIZE) { false } }
    val botShots = Array(SIZE) { BooleanArray(SIZE) { false } }

    // –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞
    var botTargetMode = false // true = –ø–æ–ø–∞–ª, –Ω—É–∂–Ω–æ –¥–æ–±–∏–≤–∞—Ç—å
    var botLastHit = Pair(0, 0)
    val botSearchDirections = listOf(0 to 1, 1 to 0, 0 to -1, -1 to 0) // –ü, –í, –õ, –ù
    var botCurrentDirection = 0

    while (true) {
        // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
        println("\n$BLUE=== –í–∞—à —Ö–æ–¥ ===$RESET")
        botBoard.print(playerShots, isPlayer = true)

        var (x, y) = getPlayerShot(playerShots)
        playerShots[x][y] = true

        if (botBoard.hit(x, y)) {
            println("$REDüî• –ü–æ–ø–∞–¥–∞–Ω–∏–µ!$RESET")
            if (botBoard.isSunk(x, y)) {
                println("$YELLOW‚öì –ö–æ—Ä–∞–±–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω!$RESET")
            }
        } else {
            println("$CYANüíß –ü—Ä–æ–º–∞—Ö.$RESET")
        }

        if (botBoard.allSunk()) {
            println("$GREENüéâ –ü–û–ë–ï–î–ê! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –±–æ—Ç–∞!$RESET")
            break
        }

        // –•–æ–¥ –±–æ—Ç–∞
        println("\n$RED=== –•–æ–¥ –±–æ—Ç–∞ ===$RESET")
        playerBoard.print(playerShots, isPlayer = false)

        val (bx, by) = getBotShot(botShots, playerBoard, botTargetMode, botLastHit, botCurrentDirection)
        botShots[bx][by] = true

        if (playerBoard.hit(bx, by)) {
            println("$REDü§ñ –ë–æ—Ç –ø–æ–ø–∞–ª –≤ ($bx+1, $by+1)!$RESET")
            botTargetMode = true
            botLastHit = bx to by
        } else {
            println("$CYANü§ñ –ë–æ—Ç –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è.$RESET")
        }

        if (playerBoard.allSunk()) {
            println("$REDüíÄ –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª! –í—Å–µ –≤–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω—ã.$RESET")
            playerBoard.reveal()
            break
        }

        Thread.sleep(1200)
    }
}

class Board {
    private val board = Array(SIZE) { CharArray(SIZE) { ' ' } }
    private val ships = mutableListOf<Ship>()

    fun placeShipsRandom() {
        val shipSizes = listOf(3, 2, 2, 1, 1, 1, 1)
        for (size in shipSizes) {
            var placed = false
            while (!placed) {
                val horizontal = Random.nextBoolean()
                val row = Random.nextInt(SIZE)
                val col = Random.nextInt(if (horizontal) SIZE - size + 1 else SIZE)
                if (canPlaceShip(row, col, size, horizontal)) {
                    placeShip(row, col, size, horizontal)
                    placed = true
                }
            }
        }
    }

    fun placeShipsManually() {
        val shipSizes = listOf(3, 2, 2, 1, 1, 1, 1)
        val shots = Array(SIZE) { BooleanArray(SIZE) { false } } // –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª–æ–≤

        for (size in shipSizes) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ
            this.print(shots, isPlayer = true)
            println("–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –∫–æ—Ä–∞–±–ª—å –∏–∑ $size –ø–∞–ª—É–±—ã(—ã):")

            while (true) {
                print("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ? (–¥/–Ω): ")
                val horStr = readLine()?.lowercase() ?: "–Ω"
                val horizontal = horStr in listOf("–¥", "–¥–∞", "y", "yes")

                print("–°—Ç—Ä–æ–∫–∞ (1-6): ")
                val row = (readLine()?.toIntOrNull() ?: 0) - 1
                print("–°—Ç–æ–ª–±–µ—Ü (1-6): ")
                val col = (readLine()?.toIntOrNull() ?: 0) - 1

                if (row !in 0 until SIZE || col !in 0 until SIZE) {
                    println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.$RESET")
                    continue
                }

                if (!canPlaceShip(row, col, size, horizontal)) {
                    println("$RED‚ùå –ù–µ–ª—å–∑—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–¥–µ—Å—å. –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –¥—Ä—É–≥–æ–º—É –∫–æ—Ä–∞–±–ª—é.$RESET")
                    continue
                }

                placeShip(row, col, size, horizontal)
                break
            }
        }
    }

    private fun canPlaceShip(row: Int, col: Int, size: Int, horizontal: Boolean): Boolean {
        for (i in 0 until size) {
            val r = if (horizontal) row else row + i
            val c = if (horizontal) col + i else col
            if (r !in 0 until SIZE || c !in 0 until SIZE) return false
            if (board[r][c] != ' ') return false
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫
        for (i in 0 until size) {
            val r = if (horizontal) row else row + i
            val c = if (horizontal) col + i else col
            for (dr in -1..1) {
                for (dc in -1..1) {
                    val nr = r + dr
                    val nc = c + dc
                    if (nr in 0 until SIZE && nc in 0 until SIZE && board[nr][nc] != ' ') {
                        return false
                    }
                }
            }
        }
        return true
    }

    private fun placeShip(row: Int, col: Int, size: Int, horizontal: Boolean) {
        val ship = Ship()
        for (i in 0 until size) {
            val r = if (horizontal) row else row + i
            val c = if (horizontal) col + i else col
            board[r][c] = '‚ñà'
            ship.parts.add(r to c)
        }
        ships.add(ship)
    }

    fun hit(x: Int, y: Int): Boolean {
        if (board[x][y] == '‚ñà') {
            board[x][y] = 'X'
            return true
        }
        if (board[x][y] == ' ') {
            board[x][y] = '‚Ä¢'
        }
        return false
    }

    fun isSunk(x: Int, y: Int): Boolean {
        for (ship in ships) {
            if ((x to y) in ship.parts) {
                return ship.parts.all { (r, c) -> board[r][c] == 'X' }
            }
        }
        return false
    }

    fun allSunk(): Boolean = ships.all { it.isSunk(board) }

    fun print(shots: Array<BooleanArray>, isPlayer: Boolean) {
        print("   ")
        for (j in 0 until SIZE) print("${j + 1} ")
        println()
        print("   ")
        for (j in 0 until SIZE) print("- ")
        println()

        for (i in 0 until SIZE) {
            print("${i + 1}| ")
            for (j in 0 until SIZE) {
                val cell = getCellDisplay(i, j, shots[i][j], isPlayer)
                print("$cell ")
            }
            println()
        }
    }

    private fun getCellDisplay(i: Int, j: Int, shot: Boolean, isPlayer: Boolean): String {
        if (!shot) return if (isPlayer) "$CYAN‚ñë$RESET" else "$CYAN?$RESET"
        return when (board[i][j]) {
            'X' -> "$RED X$RESET"
            '‚ñà' -> "$RED‚ñà$RESET"
            '‚Ä¢', ' ' -> "$GRAY‚Ä¢$RESET"
            else -> "$GRAY‚Ä¢$RESET"
        }
    }

    fun reveal() {
        println("\n$RED=== –í–ê–®–ï –ü–û–õ–ï ===$RESET")
        print("   ")
        for (j in 0 until SIZE) print("${j + 1} ")
        println()
        for (i in 0 until SIZE) {
            print("${i + 1} ")
            for (j in 0 until SIZE) {
                print("${board[i][j]} ")
            }
            println()
        }
    }
}

class Ship {
    val parts = mutableListOf<Pair<Int, Int>>()
    fun isSunk(board: Array<CharArray>): Boolean = parts.all { (r, c) -> board[r][c] == 'X' }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
fun getPlayerShot(shots: Array<BooleanArray>): Pair<Int, Int> {
    while (true) {
        print("–í–∞—à –≤—ã—Å—Ç—Ä–µ–ª (—Å—Ç—Ä–æ–∫–∞ —Å—Ç–æ–ª–±–µ—Ü): ")
        val input = readLine()?.split(" ")?.filter { it.isNotBlank() }
        if (input?.size != 2) continue
        val x = input[0].toIntOrNull()?.minus(1)
        val y = input[1].toIntOrNull()?.minus(1)
        if (x == null || y == null || x !in 0 until SIZE || y !in 0 until SIZE) {
            println("$RED‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ $SIZE$RESET")
            continue
        }
        if (shots[x][y]) {
            println("$YELLOW –í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ —Ç—É–¥–∞!$RESET")
            continue
        }
        return x to y
    }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ö–æ–¥ –±–æ—Ç–∞ (—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
fun getBotShot(
    shots: Array<BooleanArray>,
    playerBoard: Board,
    targetMode: Boolean,
    lastHit: Pair<Int, Int>,
    currentDirection: Int
): Pair<Int, Int> {

    if (targetMode) {
        // –ò—â–µ–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
        val (x, y) = lastHit
        for (i in 0..3) {
            val dirIndex = (currentDirection + i) % 4
            val (dx, dy) = listOf(0 to 1, 1 to 0, 0 to -1, -1 to 0)[dirIndex]
            val nx = x + dx
            val ny = y + dy
            if (nx in 0 until SIZE && ny in 0 until SIZE && !shots[nx][ny]) {
                return nx to ny
            }
        }
    }

    // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª
    val empty = mutableListOf<Pair<Int, Int>>()
    for (i in 0 until SIZE) {
        for (j in 0 until SIZE) {
            if (!shots[i][j]) {
                empty.add(i to j)
            }
        }
    }
    return empty.random()
}
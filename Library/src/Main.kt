import java.io.File

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val RED = "\u001b[31m"
const val BLUE = "\u001b[34m"
const val STRIKE = "\u001b[9m" // –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
private const val BOOKS_FILE = "books.txt"

data class Book(
    val title: String,
    val author: String,
    val year: Int,
    val genre: String,
    var isRead: Boolean = false
)

fun main() {
    val books = loadBooks()
    println("$CYAN=== üìö –ú–û–Ø –ë–ò–ë–õ–ò–û–¢–ï–ö–ê ===$RESET")
    println("–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∫–Ω–∏–≥!")

    while (true) {
        printMenu()
        when (readLine()?.trim()) {
            "1" -> addBook(books)
            "2" -> viewAll(books)
            "3" -> searchBooks(books)
            "4" -> markAsRead(books)
            "5" -> filterByGenre(books)
            "6" -> {
                println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                return
            }
            else -> println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì6$RESET")
        }
        saveBooks(books)
    }
}

fun printMenu() {
    println("\n$YELLOW--- –ú–ï–ù–Æ ---$RESET")
    println("1. –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
    println("2. –í—Å–µ –∫–Ω–∏–≥–∏")
    println("3. –ü–æ–∏—Å–∫")
    println("4. –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é")
    println("5. –§–∏–ª—å—Ç—Ä –ø–æ –∂–∞–Ω—Ä—É")
    println("6. –í—ã—Ö–æ–¥")
}

fun addBook(books: MutableList<Book>) {
    print("–ù–∞–∑–≤–∞–Ω–∏–µ: ")
    val title = readLine()?.trim() ?: ""
    if (title.isEmpty()) {
        println("$RED‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.$RESET")
        return
    }

    print("–ê–≤—Ç–æ—Ä: ")
    val author = readLine()?.trim() ?: ""
    if (author.isEmpty()) {
        println("$RED‚ùå –ê–≤—Ç–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.$RESET")
        return
    }

    print("–ì–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025): ")
    val year = readLine()?.toIntOrNull()
    if (year == null || year !in 1000..2100) {
        println("$RED‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥.$RESET")
        return
    }

    print("–ñ–∞–Ω—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞): ")
    val genre = readLine()?.trim() ?: "–†–∞–∑–Ω–æ–µ"

    books.add(Book(title, author, year, genre))
    println("$GREEN‚úÖ –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: '$title' ‚Äî $author$RESET")
}

fun viewAll(books: List<Book>) {
    if (books.isEmpty()) {
        println("$YELLOWüìå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞.$RESET")
        return
    }
    println("\n$CYAN=== –í–°–ï –ö–ù–ò–ì–ò ===$RESET")
    for ((i, book) in books.withIndex()) {
        val status = if (book.isRead) "$GREEN‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–∞$RESET" else "$RED‚ùå –ù–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞$RESET"
        val titleText = if (book.isRead) "$STRIKE${book.title}$RESET" else book.title
        println("${i + 1}. $titleText")
        println("   –ê–≤—Ç–æ—Ä: ${book.author}")
        println("   –ì–æ–¥: ${book.year}")
        println("   –ñ–∞–Ω—Ä: ${book.genre}")
        println("   –°—Ç–∞—Ç—É—Å: $status")
        println()
    }
}

fun searchBooks(books: List<Book>) {
    if (books.isEmpty()) {
        println("$YELLOWüìå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞.$RESET")
        return
    }

    print("–ü–æ–∏—Å–∫ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞–≤—Ç–æ—Ä—É –∏–ª–∏ –∂–∞–Ω—Ä—É): ")
    val query = readLine()?.trim()?.lowercase() ?: ""
    if (query.isEmpty()) return

    val results = books.filter {
        it.title.lowercase().contains(query) ||
                it.author.lowercase().contains(query) ||
                it.genre.lowercase().contains(query)
    }

    if (results.isEmpty()) {
        println("$RED‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.$RESET")
    } else {
        println("\n$GREEN=== –ù–ê–ô–î–ï–ù–û (${results.size}) ===$RESET")
        for (book in results) {
            val status = if (book.isRead) "‚úÖ" else "‚ùå"
            println("üîπ ${book.title} ‚Äî ${book.author} ($status)")
        }
    }
}

fun markAsRead(books: List<Book>) {
    viewAll(books)
    if (books.isEmpty()) return

    print("–ù–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏: ")
    val index = readLine()?.toIntOrNull()?.minus(1)
    if (index == null || index !in books.indices) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.$RESET")
        return
    }

    val book = books[index]
    book.isRead = true
    println("$GREENüéâ –ö–Ω–∏–≥–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è: '${book.title}'$RESET")
}

fun filterByGenre(books: List<Book>) {
    if (books.isEmpty()) {
        println("$YELLOWüìå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞.$RESET")
        return
    }

    val genres = books.map { it.genre }.toSet().sorted()
    println("\n$BLUE=== –î–û–°–¢–£–ü–ù–´–ï –ñ–ê–ù–†–´ ===$RESET")
    genres.forEachIndexed { i, genre -> println("${i + 1}. $genre") }

    print("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä (–Ω–æ–º–µ—Ä): ")
    val genreIndex = readLine()?.toIntOrNull()?.minus(1)
    if (genreIndex == null || genreIndex !in genres.indices) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.$RESET")
        return
    }

    val selectedGenre = genres[genreIndex]
    val filtered = books.filter { it.genre == selectedGenre }

    println("\n$CYAN=== –ö–ù–ò–ì–ò –í –ñ–ê–ù–†–ï '$selectedGenre' ===$RESET")
    for (book in filtered) {
        val status = if (book.isRead) "‚úÖ" else "‚ùå"
        println("üîπ ${book.title} ‚Äî ${book.author} ($status)")
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥ –∏–∑ —Ñ–∞–π–ª–∞
fun loadBooks(): MutableList<Book> {
    val file = File(BOOKS_FILE)
    if (!file.exists()) return mutableListOf()

    return file.useLines { lines ->
        lines.mapNotNull { line ->
            val parts = line.split("|")
            if (parts.size == 5) {
                val title = parts[0]
                val author = parts[1]
                val year = parts[2].toIntOrNull() ?: return@mapNotNull null
                val genre = parts[3]
                val isRead = parts[4].toBooleanStrictOrNull() ?: false
                Book(title, author, year, genre, isRead)
            } else null
        }.toMutableList()
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–∏–≥ –≤ —Ñ–∞–π–ª
fun saveBooks(books: List<Book>) {
    try {
        File(BOOKS_FILE).bufferedWriter().use { writer ->
            for (book in books) {
                writer.write("${book.title}|${book.author}|${book.year}|${book.genre}|${book.isRead}\n")
            }
        }
    } catch (e: Exception) {
        println("$RED‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}$RESET")
    }
}
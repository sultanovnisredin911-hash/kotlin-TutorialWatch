import java.io.File
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val RED = "\u001b[31m"
const val BLUE = "\u001b[34m"

// –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
private const val NOTES_DIR = "notes"

// –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
private val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")

fun main() {
    // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    File(NOTES_DIR).mkdirs()

    println("$CYAN=== üìù –ó–ê–ú–ï–¢–ö–ò ===$RESET")
    println("–í–∞—à –ª–∏—á–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏!")

    while (true) {
        printMenu()
        when (readLine()?.trim()) {
            "1" -> createNote()
            "2" -> listNotes()
            "3" -> readNote()
            "4" -> searchNotes()
            "5" -> deleteNote()
            "6" -> {
                println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                return
            }
            else -> println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì6$RESET")
        }
    }
}

fun printMenu() {
    println("\n$YELLOW--- –ú–ï–ù–Æ ---$RESET")
    println("1. –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
    println("2. –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")
    println("3. –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
    println("4. –ü–æ–∏—Å–∫")
    println("5. –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    println("6. –í—ã—Ö–æ–¥")
}

fun createNote() {
    print("–ó–∞–≥–æ–ª–æ–≤–æ–∫: ")
    val title = readLine()?.trim()
    if (title.isNullOrBlank()) {
        println("$RED‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.$RESET")
        return
    }

    println("–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–≤–≤–µ–¥–∏—Ç–µ 'END' –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
    val lines = mutableListOf<String>()
    while (true) {
        val line = readLine() ?: break
        if (line == "END") break
        lines.add(line)
    }

    val content = lines.joinToString("\n")
    val filename = "${title.replace(Regex("[/\\\\:*?\"<>|]"), "_")}.txt"
    val file = File(NOTES_DIR, filename)

    if (file.exists()) {
        println("$YELLOW‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (–¥/–Ω)$RESET")
        if (readLine()?.lowercase() !in listOf("–¥", "–¥–∞", "y", "yes")) return
    }

    try {
        file.writeText("""# $title
|–°–æ–∑–¥–∞–Ω–æ: ${LocalDateTime.now().format(formatter)}
|
|$content
""".trimMargin("|"))
        println("$GREEN‚úÖ –ó–∞–º–µ—Ç–∫–∞ '$title' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!$RESET")
    } catch (e: Exception) {
        println("$RED‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}$RESET")
    }
}

fun listNotes() {
    val files = File(NOTES_DIR).listFiles { it.extension == "txt" } ?: emptyArray()
    if (files.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫.$RESET")
        return
    }

    println("\n$CYAN=== –°–ü–ò–°–û–ö –ó–ê–ú–ï–¢–û–ö ===$RESET")
    files.sortByDescending { it.lastModified() }
    for ((i, file) in files.withIndex()) {
        val title = file.nameWithoutExtension
        val content = file.useLines { it.firstOrNull() } ?: "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
        val dateLine = file.useLines { it.elementAtOrNull(1) } ?: ""
        val date = dateLine.removePrefix("–°–æ–∑–¥–∞–Ω–æ: ")
        println("${i + 1}. $GREEN$title$RESET ‚Äî $date")
    }
}

fun readNote() {
    val files = File(NOTES_DIR).listFiles { it.extension == "txt" } ?: emptyArray()
    if (files.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫.$RESET")
        return
    }

    listNotes()
    print("–ù–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏: ")
    val index = readLine()?.toIntOrNull()?.minus(1)
    if (index == null || index !in files.indices) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.$RESET")
        return
    }

    val file = files[index]
    println("\n$BLUE--- ${file.nameWithoutExtension} ---$RESET")
    file.useLines { lines ->
        var first = true
        for (line in lines) {
            if (first && line.startsWith("# ")) continue
            if (line.startsWith("–°–æ–∑–¥–∞–Ω–æ:")) {
                println("$YELLOW$line$RESET")
                continue
            }
            if (line.isEmpty()) continue
            println(line)
        }
    }
    println()
}

fun searchNotes() {
    val files = File(NOTES_DIR).listFiles { it.extension == "txt" } ?: emptyArray()
    if (files.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫.$RESET")
        return
    }

    print("–ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: ")
    val query = readLine()?.trim()?.lowercase() ?: ""
    if (query.isEmpty()) return

    val results = files.filter {
        it.nameWithoutExtension.lowercase().contains(query)
    }

    if (results.isEmpty()) {
        println("$RED‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.$RESET")
    } else {
        println("\n$GREEN=== –ù–ê–ô–î–ï–ù–û (${results.size}) ===$RESET")
        for (file in results) {
            println("üîπ ${file.nameWithoutExtension}")
        }
    }
}

fun deleteNote() {
    val files = File(NOTES_DIR).listFiles { it.extension == "txt" } ?: emptyArray()
    if (files.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫.$RESET")
        return
    }

    listNotes()
    print("–ù–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    val index = readLine()?.toIntOrNull()?.minus(1)
    if (index == null || index !in files.indices) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.$RESET")
        return
    }

    val file = files[index]
    print("$RED –£–¥–∞–ª–∏—Ç—å '${file.nameWithoutExtension}'? (–¥/–Ω): $RESET")
    if (readLine()?.lowercase() in listOf("–¥", "–¥–∞", "y", "yes")) {
        if (file.delete()) {
            println("$YELLOWüóë –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.$RESET")
        } else {
            println("$RED‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.$RESET")
        }
    }
}
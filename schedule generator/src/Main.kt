import java.io.File

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val RED = "\u001b[31m"
const val BLUE = "\u001b[34m"

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
private const val SCHEDULE_FILE = "schedule.txt"

data class Lesson(
    val subject: String,
    val day: String,
    val time: String,
    val week: String // "–í—Å–µ", "–í–µ—Ä—Ö–Ω—è—è", "–ù–∏–∂–Ω—è—è"
)

// –ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
fun dayOrder(day: String): Int = when (day) {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" -> 1
    "–í—Ç–æ—Ä–Ω–∏–∫" -> 2
    "–°—Ä–µ–¥–∞" -> 3
    "–ß–µ—Ç–≤–µ—Ä–≥" -> 4
    "–ü—è—Ç–Ω–∏—Ü–∞" -> 5
    "–°—É–±–±–æ—Ç–∞" -> 6
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ" -> 7
    else -> 8
}

fun main() {
    val schedule = loadSchedule()
    println("$CYAN=== üìÖ –ì–ï–ù–ï–†–ê–¢–û–† –†–ê–°–ü–ò–°–ê–ù–ò–Ø ===$RESET")
    println("–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º —É—á–µ–±–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º!")

    while (true) {
        printMenu()
        when (readLine()?.trim()) {
            "1" -> addLesson(schedule)
            "2" -> viewAll(schedule)
            "3" -> viewByDay(schedule)
            "4" -> searchSubject(schedule)
            "5" -> viewByWeek(schedule)
            "6" -> {
                println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                return
            }
            else -> println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì6$RESET")
        }
        saveSchedule(schedule)
    }
}

fun printMenu() {
    println("\n$YELLOW--- –ú–ï–ù–Æ ---$RESET")
    println("1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
    println("2. –í—Å–µ –∑–∞–Ω—è—Ç–∏—è")
    println("3. –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
    println("4. –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É")
    println("5. –ü–æ —Ç–∏–ø—É –Ω–µ–¥–µ–ª–∏")
    println("6. –í—ã—Ö–æ–¥")
}

fun addLesson(schedule: MutableList<Lesson>) {
    print("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: ")
    val subject = readLine()?.trim() ?: ""
    if (subject.isEmpty()) {
        println("$RED‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.$RESET")
        return
    }

    println("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:")
    val days = listOf("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
    days.forEachIndexed { i, day -> println("${i + 1}. $day") }

    val dayIndex = readLine()?.toIntOrNull()?.minus(1)
    val day = if (dayIndex in days.indices) {
        dayIndex?.let { days[it] }
    } else {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.$RESET")
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
    }

    print("–í—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00): ")
    val time = readLine()?.trim() ?: "09:00"

    println("–¢–∏–ø –Ω–µ–¥–µ–ª–∏:")
    println("1. –í—Å–µ –Ω–µ–¥–µ–ª–∏")
    println("2. –í–µ—Ä—Ö–Ω—è—è –Ω–µ–¥–µ–ª—è")
    println("3. –ù–∏–∂–Ω—è—è –Ω–µ–¥–µ–ª—è")

    val week = when (readLine()?.trim()) {
        "2" -> "–í–µ—Ä—Ö–Ω—è—è"
        "3" -> "–ù–∏–∂–Ω—è—è"
        else -> "–í—Å–µ"
    }

    schedule.add(Lesson(subject, day.toString(), time, week))
    println("$GREEN‚úÖ –ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: '$subject' –≤ $day –≤ $time$RESET")
}

fun viewAll(schedule: List<Lesson>) {
    if (schedule.isEmpty()) {
        println("$YELLOWüìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.$RESET")
        return
    }
    println("\n$CYAN=== –í–°–ï –ó–ê–ù–Ø–¢–ò–Ø ===$RESET")
    val sorted = schedule.sortedWith(compareBy({ dayOrder(it.day) }, { it.time }))
    for (lesson in sorted) {
        println("${lesson.week} | ${lesson.day} ${lesson.time} ‚Äî ${lesson.subject}")
    }
}

fun viewByDay(schedule: List<Lesson>) {
    if (schedule.isEmpty()) {
        println("$YELLOWüìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.$RESET")
        return
    }

    println("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:")
    val days = listOf("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
    days.forEachIndexed { i, day -> println("${i + 1}. $day") }

    val index = readLine()?.toIntOrNull()?.minus(1)

    if (index !in days.indices) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.$RESET")
        return
    }
    val selectedDay = index?.let { days[it] }

    val lessons = schedule.filter { it.day == selectedDay }.sortedBy { it.time }
    if (lessons.isEmpty()) {
        println("$YELLOWüìå –í $selectedDay –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.$RESET")
    } else {
        println("\n$GREEN=== $selectedDay ===$RESET")
        for (lesson in lessons) {
            println("${lesson.time} ‚Äî ${lesson.subject} (${lesson.week})")
        }
    }
}

fun searchSubject(schedule: List<Lesson>) {
    if (schedule.isEmpty()) {
        println("$YELLOWüìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.$RESET")
        return
    }

    print("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞: ")
    val query = readLine()?.trim()?.lowercase() ?: ""
    if (query.isEmpty()) return

    val results = schedule.filter { it.subject.lowercase().contains(query) }

    if (results.isEmpty()) {
        println("$RED‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.$RESET")
    } else {
        println("\n$BLUE=== –ù–ê–ô–î–ï–ù–û (${results.size}) ===$RESET")
        for (lesson in results) {
            println("${lesson.day}, ${lesson.time} ‚Äî ${lesson.subject} (${lesson.week})")
        }
    }
}

fun viewByWeek(schedule: List<Lesson>) {
    if (schedule.isEmpty()) {
        println("$YELLOWüìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.$RESET")
        return
    }

    println("1. –í–µ—Ä—Ö–Ω—è—è –Ω–µ–¥–µ–ª—è")
    println("2. –ù–∏–∂–Ω—è—è –Ω–µ–¥–µ–ª—è")
    print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é: ")
    val input = readLine()?.trim()
    val week = when (input) {
        "1" -> "–í–µ—Ä—Ö–Ω—è—è"
        "2" -> "–ù–∏–∂–Ω—è—è"
        else -> {
            println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.$RESET")
            return
        }
    }

    val filtered = schedule.filter { it.week == week || it.week == "–í—Å–µ" }
        .sortedWith(compareBy({ dayOrder(it.day) }, { it.time }))

    if (filtered.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.$RESET")
    } else {
        println("\n$CYAN=== $week –ù–ï–î–ï–õ–Ø ===$RESET")
        var currentDay = ""
        for (lesson in filtered) {
            if (lesson.day != currentDay) {
                println("\n$YELLOW${lesson.day}:$RESET")
                currentDay = lesson.day
            }
            println("  ${lesson.time} ‚Äî ${lesson.subject}")
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
fun loadSchedule(): MutableList<Lesson> {
    val file = File(SCHEDULE_FILE)
    if (!file.exists()) return mutableListOf()

    val lines = try {
        file.readLines()
    } catch (e: Exception) {
        println("$RED‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: ${e.message}$RESET")
        return mutableListOf()
    }

    val schedule = mutableListOf<Lesson>()
    for (line in lines) {
        if (line.isBlank()) continue
        val parts = line.split("|")
        if (parts.size == 4) {
            val (subject, day, time, week) = parts
            schedule.add(Lesson(subject, day, time, week))
        }
    }
    return schedule
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
fun saveSchedule(schedule: List<Lesson>) {
    try {
        val text = schedule.joinToString("\n") { "${it.subject}|${it.day}|${it.time}|${it.week}" }
        File(SCHEDULE_FILE).writeText(text)
    } catch (e: Exception) {
        println("$RED‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}$RESET")
    }
}
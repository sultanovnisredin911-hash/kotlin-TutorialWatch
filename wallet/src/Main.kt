import java.io.File
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val RED = "\u001b[31m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val BLUE = "\u001b[34m"

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
private const val TRANSACTIONS_FILE = "transactions.txt"

// –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
private val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")

data class Transaction(
    val amount: Double,
    val type: String, // "–î–æ—Ö–æ–¥" –∏–ª–∏ "–†–∞—Å—Ö–æ–¥"
    val category: String,
    val date: LocalDateTime
)

fun main() {
    val transactions = loadTransactions()
    println("$CYAN=== üí∞ –ö–û–®–ï–õ–Å–ö ===$RESET")
    println("–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!")

    while (true) {
        printMenu()
        when (readLine()?.trim()) {
            "1" -> addIncome(transactions)
            "2" -> addExpense(transactions)
            "3" -> viewAll(transactions)
            "4" -> showBalance(transactions)
            "5" -> showStats(transactions)
            "6" -> {
                println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                break
            }
            else -> println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì6$RESET")
        }
        saveTransactions(transactions)
    }
}

fun printMenu() {
    println("\n$YELLOW--- –ú–ï–ù–Æ ---$RESET")
    println("1. –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
    println("2. –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
    println("3. –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    println("4. –ë–∞–ª–∞–Ω—Å")
    println("5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    println("6. –í—ã—Ö–æ–¥")
}

fun addIncome(transactions: MutableList<Transaction>) {
    print("–°—É–º–º–∞ –¥–æ—Ö–æ–¥–∞: ")
    val input = readLine()?.trim() ?: return
    val amount = input.toDoubleOrNull()
    if (amount == null || amount <= 0) {
        println("$RED‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.$RESET")
        return
    }

    print("–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ó–∞—Ä–ø–ª–∞—Ç–∞, –ü–æ–¥–∞—Ä–æ–∫): ")
    val category = readLine()?.trim() ?: "–†–∞–∑–Ω–æ–µ"

    transactions.add(Transaction(amount, "–î–æ—Ö–æ–¥", category, LocalDateTime.now()))
    println("$GREEN‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: $amount ‚ÇΩ$RESET")
}

fun addExpense(transactions: MutableList<Transaction>) {
    print("–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞: ")
    val input = readLine()?.trim() ?: return
    val amount = input.toDoubleOrNull()
    if (amount == null || amount <= 0) {
        println("$RED‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.$RESET")
        return
    }

    print("–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ï–¥–∞, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç): ")
    val category = readLine()?.trim() ?: "–†–∞–∑–Ω–æ–µ"

    transactions.add(Transaction(amount, "–†–∞—Å—Ö–æ–¥", category, LocalDateTime.now()))
    println("$RED‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: $amount ‚ÇΩ$RESET")
}

fun viewAll(transactions: List<Transaction>) {
    if (transactions.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.$RESET")
        return
    }
    println("\n$CYAN=== –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ===$RESET")
    for (i in transactions.indices) {
        val t = transactions[i]
        val color = if (t.type == "–î–æ—Ö–æ–¥") GREEN else RED
        val sign = if (t.type == "–î–æ—Ö–æ–¥") "+" else "-"
        println("${i + 1}. $color$sign${t.amount} ‚ÇΩ$RESET | ${t.category} | ${t.date.format(formatter)}")
    }
}

fun showBalance(transactions: List<Transaction>) {
    val income = transactions.filter { it.type == "–î–æ—Ö–æ–¥" }.sumOf { it.amount }
    val expense = transactions.filter { it.type == "–†–∞—Å—Ö–æ–¥" }.sumOf { it.amount }
    val balance = income - expense
    val color = if (balance >= 0) GREEN else RED

    println("\n$YELLOW=== –ë–ê–õ–ê–ù–° ===$RESET")
    println("$GREEN –î–æ—Ö–æ–¥: $income ‚ÇΩ$RESET")
    println("$RED –†–∞—Å—Ö–æ–¥: $expense ‚ÇΩ$RESET")
    println("$color –ë–∞–ª–∞–Ω—Å: $balance ‚ÇΩ$RESET")
}

fun showStats(transactions: List<Transaction>) {
    val expenses = transactions.filter { it.type == "–†–∞—Å—Ö–æ–¥" }
    if (expenses.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.$RESET")
        return
    }

    val byCategory = expenses.groupingBy { it.category }.fold(0.0) { acc, t -> acc + t.amount }

    println("\n$BLUE=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–•–û–î–û–í ===$RESET")
    byCategory.toList()
        .sortedByDescending { it.second }
        .forEach { (category, total) ->
            println("üîπ $category: $total ‚ÇΩ")
        }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞
fun loadTransactions(): MutableList<Transaction> {
    val file = File(TRANSACTIONS_FILE)
    if (!file.exists()) return mutableListOf()

    return file.useLines { lines ->
        lines.mapNotNull { line ->
            val parts = line.split("|")
            if (parts.size == 4) {
                val amount = parts[0].toDoubleOrNull() ?: return@mapNotNull null
                val type = parts[1]
                val category = parts[2]
                val date = runCatching { LocalDateTime.parse(parts[3], formatter) }.getOrNull()
                    ?: return@mapNotNull null
                Transaction(amount, type, category, date)
            } else null
        }.toMutableList()
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ñ–∞–π–ª
fun saveTransactions(transactions: List<Transaction>) {
    try {
        File(TRANSACTIONS_FILE).bufferedWriter().use { writer ->
            for (t in transactions) {
                writer.write("${t.amount}|${t.type}|${t.category}|${t.date.format(formatter)}\n")
            }
        }
    } catch (e: Exception) {
        println("$RED‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}$RESET")
    }
}
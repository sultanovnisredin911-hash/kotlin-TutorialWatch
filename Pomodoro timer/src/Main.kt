import java.io.File
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val RED = "\u001b[31m"
const val BLUE = "\u001b[34m"

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
private const val WORK_TIME = 25 * 60      // 25 –º–∏–Ω—É—Ç
private const val SHORT_BREAK = 5 * 60     // 5 –º–∏–Ω—É—Ç
private const val LONG_BREAK = 15 * 60     // 15 –º–∏–Ω—É—Ç
private const val SESSIONS_BEFORE_LONG = 4

// –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
private const val LOG_FILE = "pomodoro_log.txt"

// –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
private val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")

fun main() {
    var sessionCount = 0
    println("$CYAN=== üçÖ POMODORO-–¢–ê–ô–ú–ï–† ===$RESET")
    println("–¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ: 25 –º–∏–Ω —Ä–∞–±–æ—Ç—ã ‚Üí 5 –º–∏–Ω –æ—Ç–¥—ã—Ö–∞")
    println("–ü–æ—Å–ª–µ 4 —Å–µ—Å—Å–∏–π ‚Äî –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ (15 –º–∏–Ω)")

    while (true) {
        printMenu(sessionCount)
        when (readLine()?.trim()) {
            "1" -> {
                sessionCount = startWorkSession(sessionCount)
            }
            "2" -> showLog()
            "3" -> {
                println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                return
            }
            else -> println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì3$RESET")
        }
    }
}

fun printMenu(sessionCount: Int) {
    println("\n$YELLOW--- –ú–ï–ù–Æ ---$RESET")
    println("–°–µ—Å—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: $sessionCount")
    println("1. –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é —Ä–∞–±–æ—Ç—ã")
    println("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥")
    println("3. –í—ã—Ö–æ–¥")
}

fun startWorkSession(currentCount: Int): Int {
    val sessionCount = currentCount + 1
    val isLongBreak = sessionCount % SESSIONS_BEFORE_LONG == 0

    log("–°–µ—Å—Å–∏—è $sessionCount: –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")
    println("\n$GREEN=== üçÖ –†–ê–ë–û–ß–ê–Ø –°–ï–°–°–ò–Ø ($sessionCount) ===$RESET")
    countdown("–†–∞–±–æ—Ç–∞", WORK_TIME)

    // –ü–µ—Ä–µ—Ä—ã–≤
    if (isLongBreak) {
        log("–°–µ—Å—Å–∏—è $sessionCount: –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ (15 –º–∏–Ω)")
        println("\n$BLUE=== üåä –î–õ–ò–ù–ù–´–ô –ü–ï–†–ï–†–´–í (15 –º–∏–Ω) ===$RESET")
        countdown("–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤", LONG_BREAK)
    } else {
        log("–°–µ—Å—Å–∏—è $sessionCount: –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ (5 –º–∏–Ω)")
        println("\n$YELLOW=== ‚è∏ –ö–û–†–û–¢–ö–ò–ô –ü–ï–†–ï–†–´–í (5 –º–∏–Ω) ===$RESET")
        countdown("–ü–µ—Ä–µ—Ä—ã–≤", SHORT_BREAK)
    }

    return sessionCount
}

// –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
fun countdown(label: String, seconds: Int) {
    for (remaining in seconds downTo 1) {
        val min = remaining / 60
        val sec = remaining % 60
        print("\r$label: ${min}–º ${sec}—Å    ")
        Thread.sleep(1000)
    }
    print("\r‚úÖ $label –∑–∞–≤–µ—Ä—à—ë–Ω!     \n")
    print('\u0007') // —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫
}

// –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
fun log(message: String) {
    val timestamp = LocalDateTime.now().format(formatter)
    try {
        File(LOG_FILE).appendText("[$timestamp] $message\n")
    } catch (e: Exception) {
        println("$RED‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥: ${e.message}$RESET")
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞
fun showLog() {
    val file = File(LOG_FILE)
    if (!file.exists()) {
        println("$YELLOWüìå –õ–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.$RESET")
        return
    }

    val lines = file.readLines()
    if (lines.isEmpty()) {
        println("$YELLOWüìå –õ–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.$RESET")
        return
    }

    println("\n$BLUE=== –ò–°–¢–û–†–ò–Ø –°–ï–°–°–ò–ô ===$RESET")
    lines.forEach { println(it) }
}
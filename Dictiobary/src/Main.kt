import kotlin.random.Random

fun main() {
    // –°–ª–æ–≤–∞—Ä—å: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ ‚Üí —Ä—É—Å—Å–∫–æ–µ
 val dictionary = mutableMapOf(
        "hello" to "–ø—Ä–∏–≤–µ—Ç",
        "world" to "–º–∏—Ä",
        "cat" to "–∫–æ—Ç",
        "dog" to "—Å–æ–±–∞–∫–∞",
        "sun" to "—Å–æ–ª–Ω—Ü–µ",
        "moon" to "–ª—É–Ω–∞",
        "book" to "–∫–Ω–∏–≥–∞",
        "friend" to "–¥—Ä—É–≥",
        "water" to "–≤–æ–¥–∞",
        "fire" to "–æ–≥–æ–Ω—å",
        "house" to "–¥–æ–º",
        "car" to "–º–∞—à–∏–Ω–∞",
        "tree" to "–¥–µ—Ä–µ–≤–æ",
        "flower" to "—Ü–≤–µ—Ç–æ–∫",
        "child" to "—Ä–µ–±—ë–Ω–æ–∫",
        "mother" to "–º–∞–º–∞",
        "father" to "–ø–∞–ø–∞",
        "school" to "—à–∫–æ–ª–∞",
        "teacher" to "—É—á–∏—Ç–µ–ª—å",
        "student" to "—Å—Ç—É–¥–µ–Ω—Ç",
        "city" to "–≥–æ—Ä–æ–¥",
        "street" to "—É–ª–∏—Ü–∞",
        "door" to "–¥–≤–µ—Ä—å",
        "window" to "–æ–∫–Ω–æ",
        "table" to "—Å—Ç–æ–ª",
        "chair" to "—Å—Ç—É–ª",
        "food" to "–µ–¥–∞",
        "apple" to "—è–±–ª–æ–∫–æ",
        "milk" to "–º–æ–ª–æ–∫–æ",
        "bread" to "—Ö–ª–µ–±",
        "coffee" to "–∫–æ—Ñ–µ",
        "time" to "–≤—Ä–µ–º—è",
        "day" to "–¥–µ–Ω—å",
        "night" to "–Ω–æ—á—å",
        "week" to "–Ω–µ–¥–µ–ª—è",
        "year" to "–≥–æ–¥",
        "man" to "–º—É–∂—á–∏–Ω–∞",
        "woman" to "–∂–µ–Ω—â–∏–Ω–∞",
        "hand" to "—Ä—É–∫–∞",
        "eye" to "–≥–ª–∞–∑",
        "ear" to "—É—Ö–æ",
        "nose" to "–Ω–æ—Å",
        "face" to "–ª–∏—Ü–æ",
        "love" to "–ª—é–±–æ–≤—å",
        "peace" to "–º–∏—Ä",
        "war" to "–≤–æ–π–Ω–∞",
        "game" to "–∏–≥—Ä–∞",
        "music" to "–º—É–∑—ã–∫–∞",
        "song" to "–ø–µ—Å–Ω—è",
        "rain" to "–¥–æ–∂–¥—å",
        "snow" to "—Å–Ω–µ–≥",
        "cold" to "—Ö–æ–ª–æ–¥",
        "hot" to "–∂–∞—Ä–∫–æ"
    )

    println("=== üìö –ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å ===")

    while (true) {
        println("\n–ú–µ–Ω—é:")
        println("1. –£—á–∏—Ç—å —Å–ª–æ–≤–∞ (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)")
        println("2. –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
        println("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞")
        println("4. –í—ã—Ö–æ–¥")
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ")

        when (readLine()?.trim()) {
            "1" -> startQuiz(dictionary)
            "2" -> addWord(dictionary)
            "3" -> showAllWords(dictionary)
            "4" -> {
                println("–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! üëã")
                return
            }
            else -> println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4.")
        }
    }
}

// –†–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
fun startQuiz(dictionary: Map<String, String>) {
    if (dictionary.isEmpty()) {
        println("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞!")
        return
    }

    println("\nüéØ –†–µ–∂–∏–º: –£—á–∏–º —Å–ª–æ–≤–∞! –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥.")
    var correct = 0
    var total = 0

    // –°–ª—É—á–∞–π–Ω—ã–µ 5 —Å–ª–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ —Å–ª–æ–≤ –º–∞–ª–æ)
    val wordsToQuiz = dictionary.toList().shuffled().take(5)

    for ((english, russian) in wordsToQuiz) {
        println("\n–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: '$english'?")
        print("–í–∞—à –æ—Ç–≤–µ—Ç: ")
        val answer = readLine()?.trim()?.lowercase()

        if (answer == "–≤—ã—Ö–æ–¥") break

        total++
        if (answer == russian) {
            println("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            correct++
        } else {
            println("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: '$russian'")
        }
    }

    if (total > 0) {
        println("\nüèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        println("–†–µ–∑—É–ª—å—Ç–∞—Ç: $correct –∏–∑ $total (${correct * 100 / total}%)")
    }
}

// –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
fun addWord(dictionary: MutableMap<String, String>) {
    print("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ: ")
    val english = readLine()?.trim()?.lowercase() ?: return

    if (english.isEmpty()) {
        println("‚ùå –°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    }

    if (dictionary.containsKey(english)) {
        println("‚ö†Ô∏è –°–ª–æ–≤–æ '$english' —É–∂–µ –µ—Å—Ç—å: ${dictionary[english]}")
        print("–ó–∞–º–µ–Ω–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ")
        if (readLine()?.lowercase() != "–¥–∞") return
    }

    print("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: ")
    val russian = readLine()?.trim() ?: return

    if (russian.isEmpty()) {
        println("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    }

    dictionary[english] = russian
    println("‚úÖ –°–ª–æ–≤–æ '$english ‚Äî $russian' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞
fun showAllWords(dictionary: Map<String, String>) {
    if (dictionary.isEmpty()) {
        println("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.")
        return
    }

    println("\nüìñ –í—Å–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ:")
    for ((eng, rus) in dictionary) {
        println("  $eng ‚Äî $rus")
    }
    println("–í—Å–µ–≥–æ: ${dictionary.size} —Å–ª–æ–≤(–∞)")
}
import java.security.SecureRandom
import java.io.File

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val RED = "\u001b[31m"
const val BLUE = "\u001b[34m"

// –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º—ë–Ω –ø–∞—Ä–æ–ª–µ–π
private const val PASSWORDS_FILE = "passwords.txt"

// –ù–∞–±–æ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤
private const val LOWER = "abcdefghijklmnopqrstuvwxyz"
private const val UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
private const val DIGITS = "0123456789"
private const val SPECIAL = "!@#$%^&*()_+-=[]{}|;:,.<>?"

fun main() {
    println("$CYAN=== üîê –ì–ï–ù–ï–†–ê–¢–û–† –ü–ê–†–û–õ–ï–ô ===$RESET")
    println("–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –Ω–∞–¥—ë–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏!")

    while (true) {
        printMenu()
        when (readLine()?.trim()) {
            "1" -> generatePassword()
            "2" -> analyzePassword()
            "3" -> viewSaved()
            "4" -> {
                println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                return
            }
            else -> println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì4$RESET")
        }
    }
}

fun printMenu() {
    println("\n$YELLOW--- –ú–ï–ù–Æ ---$RESET")
    println("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å")
    println("2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å")
    println("3. –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–º–µ–Ω–∞")
    println("4. –í—ã—Ö–æ–¥")
}

fun generatePassword() {
    print("–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è (6‚Äì100): ")
    val length = readLine()?.toIntOrNull()
    if (length == null || length !in 6..100) {
        println("$RED‚ùå –î–ª–∏–Ω–∞: –æ—Ç 6 –¥–æ 100.$RESET")
        return
    }

    var chars = ""
    println("–í–∫–ª—é—á–∏—Ç—å: (–≤–≤–µ–¥–∏—Ç–µ –¥–∞/–Ω–µ—Ç)")
    print("  –ë—É–∫–≤—ã (a-z, A-Z)? ")
    if (readLine()?.lowercase() in listOf("–¥–∞", "y", "yes")) {
        chars += LOWER + UPPER
    }

    print("  –¶–∏—Ñ—Ä—ã (0-9)? ")
    if (readLine()?.lowercase() in listOf("–¥–∞", "y", "yes")) {
        chars += DIGITS
    }

    print("  –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã? (!@#...)? ")
    if (readLine()?.lowercase() in listOf("–¥–∞", "y", "yes")) {
        chars += SPECIAL
    }

    if (chars.isEmpty()) {
        println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤.$RESET")
        return
    }

    val password = generateRandomString(length, chars)
    println("\n$GREENüîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: $password$RESET")

    print("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è (–Ω–µ —Å–∞–º –ø–∞—Ä–æ–ª—å!)? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Gmail'): ")
    val name = readLine()?.trim()
    if (name.isNullOrBlank()) {
        println("–ò–º—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    } else {
        savePasswordName(name)
        println("$YELLOWüìå –ò–º—è '$name' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.$RESET")
    }
}

fun generateRandomString(length: Int, chars: String): String {
    val random = SecureRandom()
    return (1..length).map { chars[random.nextInt(chars.length)] }.joinToString("")
}

fun analyzePassword() {
    print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ")
    val password = readLine() ?: return

    var score = 0
    val feedback = mutableListOf<String>()

    if (password.length >= 8) score += 2 else feedback.add("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω. 8)")
    if (password.length >= 12) score += 1
    if (password.any { it in LOWER }) score += 1 else feedback.add("‚ùå –ù–µ—Ç —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤")
    if (password.any { it in UPPER }) score += 1 else feedback.add("‚ùå –ù–µ—Ç –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤")
    if (password.any { it in DIGITS }) score += 1 else feedback.add("‚ùå –ù–µ—Ç —Ü–∏—Ñ—Ä")
    if (password.any { it in SPECIAL }) score += 1 else feedback.add("‚ùå –ù–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤")
    if (password.length >= 16) score += 1

    val strength = when {
        score >= 6 -> "$GREEN –ù–∞–¥—ë–∂–Ω—ã–π$RESET"
        score >= 4 -> "$YELLOW –°—Ä–µ–¥–Ω–∏–π$RESET"
        else -> "$RED –°–ª–∞–±—ã–π$RESET"
    }

    println("\n$CYAN=== –ê–ù–ê–õ–ò–ó –ü–ê–†–û–õ–Ø ===$RESET")
    println("–î–ª–∏–Ω–∞: ${password.length}")
    println("–û—Ü–µ–Ω–∫–∞: $strength ($score/7)")
    if (feedback.isEmpty()) {
        println("$GREEN‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Ä–æ–ª—å!$RESET")
    } else {
        feedback.forEach { println(it) }
    }
}

fun savePasswordName(name: String) {
    try {
        File(PASSWORDS_FILE).appendText("$name\n")
    } catch (e: Exception) {
        println("$RED‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: ${e.message}$RESET")
    }
}

fun viewSaved() {
    val file = File(PASSWORDS_FILE)
    if (!file.exists()) {
        println("$YELLOWüìå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–º—ë–Ω.$RESET")
        return
    }

    val names = file.readLines().filter { it.isNotBlank() }
    if (names.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–º—ë–Ω.$RESET")
        return
    }

    println("\n$BLUE=== –°–û–•–†–ê–ù–Å–ù–ù–´–ï –ò–ú–ï–ù–ê ===$RESET")
    names.forEachIndexed { i, name ->
        println("${i + 1}. $name")
    }
}
import java.io.File

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val RED = "\u001b[31m"
const val BLUE = "\u001b[34m"

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
val CONTACTS_FILE = "contacts.txt"

data class Contact(
    val name: String,
    val phone: String,
    val email: String = ""
)

fun main() {
    val contacts = loadContacts()
    println("$CYAN=== üìû –¢–ï–õ–ï–§–û–ù–ù–ê–Ø –ö–ù–ò–ì–ê ===$RESET")
    println("–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏!")

    while (true) {
        printMenu()
        when (readLine()?.trim()) {
            "1" -> addContact(contacts)
            "2" -> viewAll(contacts)
            "3" -> searchContact(contacts)
            "4" -> deleteContact(contacts)
            "5" -> {
                println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                break
            }
            else -> println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì5$RESET")
        }
        saveContacts(contacts)
    }
}

fun printMenu() {
    println("\n$YELLOW--- –ú–ï–ù–Æ ---$RESET")
    println("1. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
    println("2. –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
    println("3. –ü–æ–∏—Å–∫")
    println("4. –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
    println("5. –í—ã—Ö–æ–¥")
}

fun addContact(contacts: MutableList<Contact>) {
    print("–ò–º—è: ")
    val name = readLine()?.trim() ?: ""
    if (name.isEmpty()) {
        println("$RED‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.$RESET")
        return
    }

    print("–¢–µ–ª–µ—Ñ–æ–Ω: ")
    val phone = readLine()?.trim() ?: ""
    if (phone.isEmpty()) {
        println("$RED‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.$RESET")
        return
    }

    print("Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ")
    val email = readLine()?.trim() ?: ""

    contacts.add(Contact(name, phone, email))
    println("$GREEN‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: $name$RESET")
}

fun viewAll(contacts: List<Contact>) {
    if (contacts.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.$RESET")
        return
    }
    println("\n$CYAN=== –í–°–ï –ö–û–ù–¢–ê–ö–¢–´ ===$RESET")
    for (i in contacts.indices) {
        val c = contacts[i]
        println("${i + 1}. $c.name")
        println("   üì± $c.phone")
        if (c.email.isNotBlank()) println("   ‚úâÔ∏è  $c.email")
    }
}

fun searchContact(contacts: List<Contact>) {
    if (contacts.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.$RESET")
        return
    }

    print("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É: ")
    val query = readLine()?.trim()?.lowercase() ?: ""
    if (query.isEmpty()) {
        println("$YELLOWüîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.$RESET")
        return
    }

    val results = contacts.filter {
        it.name.lowercase().contains(query) ||
                it.phone.contains(query)
    }

    if (results.isEmpty()) {
        println("$RED‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.$RESET")
    } else {
        println("\n$GREEN=== –ù–ê–ô–î–ï–ù–û (${results.size}) ===$RESET")
        for (c in results) {
            println("üîπ ${c.name}")
            println("   üì± ${c.phone}")
            if (c.email.isNotBlank()) println("   ‚úâÔ∏è  ${c.email}")
        }
    }
}

fun deleteContact(contacts: MutableList<Contact>) {
    viewAll(contacts)
    if (contacts.isEmpty()) return

    print("–ù–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    val index = readLine()?.toIntOrNull()?.minus(1)
    if (index == null || index !in contacts.indices) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.$RESET")
        return
    }
    val removed = contacts.removeAt(index)
    println("$YELLOWüóë –£–¥–∞–ª—ë–Ω: ${removed.name}$RESET")
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
fun loadContacts(): MutableList<Contact> {
    val file = File(CONTACTS_FILE)
    if (!file.exists()) return mutableListOf()

    return file.readLines().mapNotNull { line ->
        val parts = line.split("|")
        if (parts.size >= 2) {
            Contact(parts[0], parts[1], parts.getOrNull(2) ?: "")
        } else null
    }.toMutableList()
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
fun saveContacts(contacts: List<Contact>) {
    try {
        File(CONTACTS_FILE).writeText(
            contacts.joinToString("\n") { "${it.name}|${it.phone}|${it.email}" }
        )
    } catch (e: Exception) {
        println("$RED‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}$RESET")
    }
}
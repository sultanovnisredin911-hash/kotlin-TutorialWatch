import kotlin.random.Random
import java.io.File

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val RED = "\u001b[31m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val BLUE = "\u001b[34m"
const val MAGENTA = "\u001b[35m"

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞: —Å–ª–æ–≤–æ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
data class WordWithHint(val word: String, val hint: String)

fun main() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞
    val wordsFile = File("words.txt")
    if (!wordsFile.exists()) {
        println("$RED –§–∞–π–ª words.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!$RESET")
        return
    }

    val allWords = wordsFile.readLines()
        .filter { it.contains(",") }
        .map {
            val (word, hint) = it.split(",", limit = 2)
            WordWithHint(word.trim().uppercase(), hint.trim())
        }

    if (allWords.isEmpty()) {
        println("$RED –ù–µ—Ç —Å–ª–æ–≤ –≤ —Ñ–∞–π–ª–µ!$RESET")
        return
    }

    var wins = 0
    var losses = 0
    val guessedWords = mutableSetOf<String>() // —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å

    println("$CYAN=== ü™¢ –í–∏—Å–µ–ª–∏—Ü–∞ PRO ===$RESET")
    println("–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –ø–æ –±—É–∫–≤–∞–º. –£ –≤–∞—Å 6 –ø–æ–ø—ã—Ç–æ–∫.")

    while (true) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ —É—Ä–æ–≤–Ω—é
        val availableWords = allWords.filter { it.word !in guessedWords }
        if (availableWords.isEmpty()) {
            println("$YELLOW –í—ã —É–≥–∞–¥–∞–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞!$RESET")
            break
        }

        val difficulty = chooseDifficulty()
        val filteredWords = when (difficulty) {
            "–ª—ë–≥–∫–∏–π" -> availableWords.filter { it.word.length <= 4 }
            "—Å—Ä–µ–¥–Ω–∏–π" -> availableWords.filter { it.word.length in 5..7 }
            "—Å–ª–æ–∂–Ω—ã–π" -> availableWords.filter { it.word.length > 7 }
            else -> availableWords
        }.ifEmpty { availableWords }

        val wordData = filteredWords.random()
        val word = wordData.word
        val hint = wordData.hint

        // –ò–≥—Ä–∞–µ–º
        val won = playGame(word, hint)
        if (won) {
            wins++
            guessedWords.add(word)
        } else {
            losses++
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        println("$CYAN –°—á—ë—Ç: $GREEN$wins$CYAN –ø–æ–±–µ–¥ | $RED$losses$CYAN –ø–æ—Ä–∞–∂–µ–Ω–∏–π$RESET")

        println("\n$CYAN –ü—Ä–æ–¥–æ–ª–∂–∏–º? (–¥–∞/–Ω–µ—Ç)$RESET")
        val again = readLine()?.trim()?.lowercase()
        if (again !in listOf("–¥–∞", "yes", "–¥", "y")) break
    }

    println("$GREEN –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!$RESET")
    println("–ò—Ç–æ–≥–æ: $wins –ø–æ–±–µ–¥, $losses –ø–æ—Ä–∞–∂–µ–Ω–∏–π. –£–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤: ${guessedWords.size}")
}

// –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
fun chooseDifficulty(): String {
    while (true) {
        println("\n$CYAN –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:$RESET")
        println("1. $GREEN –õ—ë–≥–∫–∏–π$RESET (–¥–æ 4 –±—É–∫–≤)")
        println("2. $YELLOW –°—Ä–µ–¥–Ω–∏–π$RESET (5‚Äì7 –±—É–∫–≤)")
        println("3. $RED –°–ª–æ–∂–Ω—ã–π$RESET (8+ –±—É–∫–≤)")
        print("$CYAN –í–∞—à –≤—ã–±–æ—Ä: $RESET")

        return when (readLine()?.trim()) {
            "1" -> "–ª—ë–≥–∫–∏–π"
            "2" -> "—Å—Ä–µ–¥–Ω–∏–π"
            "3" -> "—Å–ª–æ–∂–Ω—ã–π"
            else -> {
                println("$RED –í—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3$RESET")
                continue
            }
        }
    }
}

// –°–∞–º–∞ –∏–≥—Ä–∞
fun playGame(word: String, hint: String): Boolean {
    val guessedLetters = mutableSetOf<Char>()
    var mistakes = 0
    val maxMistakes = 6
    var usedHint = false

    while (mistakes < maxMistakes) {
        val displayWord = buildDisplayWord(word, guessedLetters)
        if (displayWord.replace(" ", "") == word) {
            println("$GREEN –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: $word!$RESET")
            return true
        }

        printBoard(mistakes)
        println("$BLUE –°–ª–æ–≤–æ: $displayWord$RESET")
        println("$YELLOW –£–≥–∞–¥–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: ${guessedLetters.sorted().joinToString(" ")}$RESET")
        println("$CYAN –û—à–∏–±–∫–∏: $mistakes/$maxMistakes$RESET")

        // –ü–æ–¥—Å–∫–∞–∑–∫–∞
        if (!usedHint && mistakes >= 3 && readYesNo("–•–æ—Ç–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É?")) {
            println("$MAGENTA –ü–æ–¥—Å–∫–∞–∑–∫–∞: —ç—Ç–æ $hint.$RESET")
            usedHint = true
        }

        print("$CYAN –í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É: $RESET")
        val input = readLine()?.trim()?.uppercase()

        if (input?.lowercase() in listOf("–≤—ã—Ö–æ–¥", "exit")) {
            println("$YELLOW –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.$RESET")
            return false
        }

        if (input == null || input.length != 1 || !input[0].isLetter()) {
            println("$RED –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –±—É–∫–≤—É.$RESET")
            continue
        }

        val letter = input[0]

        if (letter in guessedLetters) {
            println("$YELLOW –æ" +
                    "–µ" +
                    "–í—ã —É–∂–µ —É–≥–∞–¥—ã–≤–∞–ª–∏ '$letter'!$RESET")
            continue
        }

        guessedLetters.add(letter)

        if (letter in word) {
            println("$GREEN –ü—Ä–∞–≤–∏–ª—å–Ω–æ!$RESET")
        } else {
            mistakes++
            println("$RED –ù–µ—Ç —Ç–∞–∫–æ–π –±—É–∫–≤—ã.$RESET")
        }

        Thread.sleep(600)
    }

    printBoard(mistakes)
    println("$RED –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: $word$RESET")
    return false
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ —Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
fun buildDisplayWord(word: String, guessed: Set<Char>): String {
    return word.map { if (it in guessed) it else '_' }.joinToString(" ")
}

// –†–∏—Å—É–µ—Ç –≤–∏—Å–µ–ª–∏—Ü—É
fun printBoard(mistakes: Int) {
    val parts = listOf(
        "   +---+  ",
        "   |   |  ",
        when (mistakes) {
            0 -> "       |  "
            1 -> "   O   |  "
            2 -> "   O   |  \n   |   |  "
            3 -> "   O   |  \n  /|   |  "
            4 -> "   O   |  \n  /|\\  |  "
            5 -> "   O   |  \n  /|\\  |  \n  /    |  "
            6 -> "   O   |  \n  /|\\  |  \n  / \\  |  "
            else -> ""
        },
        "       |  ",
        "========="
    )

    println()
    for (part in parts) {
        if (part.isNotBlank()) println(part)
    }
    println()
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: "–¥–∞/–Ω–µ—Ç"
fun readYesNo(prompt: String): Boolean {
    while (true) {
        print("$CYAN$prompt (–¥–∞/–Ω–µ—Ç): $RESET")
        val input = readLine()?.trim()?.lowercase()
        if (input in listOf("–¥–∞", "yes", "–¥", "y")) return true
        if (input in listOf("–Ω–µ—Ç", "no", "–Ω", "n", "")) return false
        println("$RED –í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.$RESET")
    }
}
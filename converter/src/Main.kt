import java.io.File

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val RED = "\u001b[31m"
const val BLUE = "\u001b[34m"

// –§–∞–π–ª –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
private const val HISTORY_FILE = "conversion_history.txt"
private const val MAX_HISTORY = 10

fun main() {
    println("$CYAN=== üîÑ –ö–û–ù–í–ï–†–¢–ï–† –ï–î–ò–ù–ò–¶ ===$RESET")
    println("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–ª–∏–Ω—É, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≤–µ—Å –∏ –≤–∞–ª—é—Ç—É!")

    while (true) {
        printMenu()
        when (readLine()?.trim()) {
            "1" -> convertLength()
            "2" -> convertTemperature()
            "3" -> convertWeight()
            "4" -> convertCurrency()
            "5" -> showHistory()
            "6" -> {
                println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                return
            }
            else -> println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì6$RESET")
        }
    }
}

fun printMenu() {
    println("\n$YELLOW--- –ú–ï–ù–Æ ---$RESET")
    println("1. –î–ª–∏–Ω–∞ (–º, –∫–º, —Å–º, –¥—é–π–º—ã, —Ñ—É—Ç—ã)")
    println("2. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C, ¬∞F, K)")
    println("3. –í–µ—Å (–∫–≥, –≥, —Ñ—É–Ω—Ç—ã, —É–Ω—Ü–∏–∏)")
    println("4. –í–∞–ª—é—Ç–∞ (RUB, USD, EUR)")
    println("5. –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π")
    println("6. –í—ã—Ö–æ–¥")
}

// === –î–õ–ò–ù–ê ===
fun convertLength() {
    val units = mapOf(
        "1" to "–º–µ—Ç—Ä—ã",
        "2" to "–∫–∏–ª–æ–º–µ—Ç—Ä—ã",
        "3" to "—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã",
        "4" to "–¥—é–π–º—ã",
        "5" to "—Ñ—É—Ç—ã"
    )

    val factors = mapOf<String, Double>(
        "–º–µ—Ç—Ä—ã" to 1.0,
        "–∫–∏–ª–æ–º–µ—Ç—Ä—ã" to 1000.0,
        "—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã" to 0.01,
        "–¥—é–π–º—ã" to 0.0254,
        "—Ñ—É—Ç—ã" to 0.3048
    )

    printValueAndUnit("–¥–ª–∏–Ω—É", units) { value, from, to ->
        val meters = value * factors[from]!!
        val result = meters / factors[to]!!
        "‚úÖ $value $from = ${"%.4f".format(result)} $to"
    }
}

// === –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê ===
fun convertTemperature() {
    val units = mapOf(
        "1" to "–¶–µ–ª—å—Å–∏–π (¬∞C)",
        "2" to "–§–∞—Ä–µ–Ω–≥–µ–π—Ç (¬∞F)",
        "3" to "–ö–µ–ª—å–≤–∏–Ω (K)"
    )

    print("–ó–Ω–∞—á–µ–Ω–∏–µ: ")
    val value = readLine()?.toDoubleOrNull()
    if (value == null) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.$RESET")
        return
    }

    println("–ò–∑:")
    units.forEach { (k, v) -> println("$k. $v") }
    val fromKey = readLine()?.trim()
    val from = units[fromKey]
    if (from == null) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.$RESET")
        return
    }

    println("–í:")
    units.forEach { (k, v) -> println("$k. $v") }
    val toKey = readLine()?.trim()
    val to = units[toKey]
    if (to == null) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.$RESET")
        return
    }

    val result = when {
        from == to -> value
        from == "–¶–µ–ª—å—Å–∏–π (¬∞C)" && to == "–§–∞—Ä–µ–Ω–≥–µ–π—Ç (¬∞F)" -> value * 9/5 + 32
        from == "–¶–µ–ª—å—Å–∏–π (¬∞C)" && to == "–ö–µ–ª—å–≤–∏–Ω (K)" -> value + 273.15
        from == "–§–∞—Ä–µ–Ω–≥–µ–π—Ç (¬∞F)" && to == "–¶–µ–ª—å—Å–∏–π (¬∞C)" -> (value - 32) * 5/9
        from == "–§–∞—Ä–µ–Ω–≥–µ–π—Ç (¬∞F)" && to == "–ö–µ–ª—å–≤–∏–Ω (K)" -> (value - 32) * 5/9 + 273.15
        from == "–ö–µ–ª—å–≤–∏–Ω (K)" && to == "–¶–µ–ª—å—Å–∏–π (¬∞C)" -> value - 273.15
        from == "–ö–µ–ª—å–≤–∏–Ω (K)" && to == "–§–∞—Ä–µ–Ω–≥–µ–π—Ç (¬∞F)" -> (value - 273.15) * 9/5 + 32
        else -> value
    }

    val message = "‚úÖ $value $from = ${"%.4f".format(result)} $to"
    println("$GREEN$message$RESET")
    addToHistory(message)
}

// === –í–ï–° ===
fun convertWeight() {
    val units = mapOf(
        "1" to "–∫–∏–ª–æ–≥—Ä–∞–º–º—ã",
        "2" to "–≥—Ä–∞–º–º—ã",
        "3" to "—Ñ—É–Ω—Ç—ã",
        "4" to "—É–Ω—Ü–∏–∏"
    )

    val factors = mapOf<String, Double>(
        "–∫–∏–ª–æ–≥—Ä–∞–º–º—ã" to 1.0,
        "–≥—Ä–∞–º–º—ã" to 0.001,
        "—Ñ—É–Ω—Ç—ã" to 0.453592,
        "—É–Ω—Ü–∏–∏" to 0.0283495
    )

    printValueAndUnit("–≤–µ—Å", units) { value, from, to ->
        val kg = value * factors[from]!!
        val result = kg / factors[to]!!
        "‚úÖ $value $from = ${"%.4f".format(result)} $to"
    }
}

// === –í–ê–õ–Æ–¢–ê ===
fun convertCurrency() {
    val units = mapOf(
        "1" to "RUB",
        "2" to "USD",
        "3" to "EUR"
    )

    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã (–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å)
    val rates = mapOf(
        "RUB" to 1.0,
        "USD" to 90.0,
        "EUR" to 100.0
    )

    printValueAndUnit("—Å—É–º–º—É", units) { value, from, to ->
        val rub = value * rates[from]!!
        val result = rub / rates[to]!!
        "‚úÖ $value $from = ${"%.2f".format(result)} $to"
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –µ–¥–∏–Ω–∏—Ü
inline fun printValueAndUnit(
    type: String,
    units: Map<String, String>,
    crossinline convert: (Double, String, String) -> String
) {
    print("–í–≤–µ–¥–∏—Ç–µ $type: ")
    val value = readLine()?.toDoubleOrNull()
    if (value == null) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.$RESET")
        return
    }

    println("–ò–∑:")
    units.forEach { (k, v) -> println("$k. $v") }
    val fromKey = readLine()?.trim()
    val from = units[fromKey]
    if (from == null) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.$RESET")
        return
    }

    println("–í:")
    units.forEach { (k, v) -> println("$k. $v") }
    val toKey = readLine()?.trim()
    val to = units[toKey]
    if (to == null) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.$RESET")
        return
    }

    val message = convert(value, from, to)
    println("$GREEN$message$RESET")
    addToHistory(message)
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
fun addToHistory(entry: String) {
    val lines = if (File(HISTORY_FILE).exists()) {
        File(HISTORY_FILE).readLines().toMutableList()
    } else mutableListOf()

    lines.add(0, entry) // –≤ –Ω–∞—á–∞–ª–æ
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∑–∞–ø–∏—Å–µ–π
    val toSave = lines.take(MAX_HISTORY)

    try {
        File(HISTORY_FILE).writeText(toSave.joinToString("\n"))
    } catch (e: Exception) {
        println("$RED‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: ${e.message}$RESET")
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏
fun showHistory() {
    val file = File(HISTORY_FILE)
    if (!file.exists()) {
        println("$YELLOWüìå –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.$RESET")
        return
    }

    val lines = file.readLines()
    if (lines.isEmpty()) {
        println("$YELLOWüìå –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.$RESET")
        return
    }

    println("\n$BLUE=== –ò–°–¢–û–†–ò–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–ô ===$RESET")
    lines.forEachIndexed { i, line ->
        println("${i + 1}. $line")
    }
}
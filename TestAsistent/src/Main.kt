fun main() {
    println("=== üìù –¢–µ—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ===")
    println("–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–æ–º–µ—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1, 2, 3, 4)")

    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ JSON
    val jsonContent = """
        [
          {
            "question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?",
            "options": ["3", "4", "5", "6"],
            "correct": 1
          },
          {
            "question": "–ö–∞–∫–æ–π —Ü–≤–µ—Ç —É –Ω–µ–±–∞?",
            "options": ["–ó–µ–ª—ë–Ω—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ß—ë—Ä–Ω—ã–π"],
            "correct": 2
          },
          {
            "question": "–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω–∞–ø–∏—Å–∞–Ω —ç—Ç–æ—Ç –±–æ—Ç?",
            "options": ["Python", "Java", "C++", "Kotlin"],
            "correct": 3
          }
        ]
    """.trimIndent()

    val questions = parseTestJson(jsonContent)

    if (questions.isEmpty()) {
        println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return
    }

    var correctAnswers = 0

    for ((index, q) in questions.withIndex()) {
        println("\n–í–æ–ø—Ä–æ—Å ${index + 1}: ${q.question}")
        for (i in q.options.indices) {
            println("  ${i + 1}. ${q.options[i]}")
        }
        print("–í–∞—à –æ—Ç–≤–µ—Ç (1‚Äì${q.options.size}): ")
        val input = readLine()?.trim()

        val answer = input?.toIntOrNull()?.minus(1) // –≤ –∏–Ω–¥–µ–∫—Å (0-based)

        if (answer == q.correct) {
            println("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            correctAnswers++
        } else {
            println("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${q.options[q.correct]}")
        }
    }

    println("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
    println("–†–µ–∑—É–ª—å—Ç–∞—Ç: $correctAnswers –∏–∑ ${questions.size}")
    val percent = correctAnswers * 100 / questions.size
    when {
        percent == 100 -> println("üëë –ò–¥–µ–∞–ª—å–Ω–æ! –¢—ã –≥–µ–Ω–∏–π!")
        percent >= 80 -> println("üëè –û—Ç–ª–∏—á–Ω–æ!")
        percent >= 60 -> println("üëç –•–æ—Ä–æ—à–æ!")
        else -> println("üìö –ü—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è!")
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
data class Question(
    val question: String,
    val options: List<String>,
    val correct: Int // –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (0-based)
)

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π "–ø–∞—Ä—Å–µ—Ä" JSON (–¥–ª—è –æ–±—É—á–µ–Ω–∏—è)
fun parseTestJson(json: String): List<Question> {
    val questions = mutableListOf<Question>()
    var i = 0
    val len = json.length

    while (i < len) {
        if (json.startsWith("[", i) || json.startsWith("{", i) || json.startsWith("}", i) || json[i] in " \t\n") {
            i++
            continue
        }

        if (json.startsWith("\"question\"", i)) {
            i += 10 // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º "question"
            val qText = parseStringValue(json, i).also { i = it.second }
            val options = mutableListOf<String>()
            var correctIndex = 0

            // –ò—â–µ–º "options"
            while (i < len && !json.startsWith("\"options\"", i)) i++
            if (json.startsWith("\"options\"", i)) {
                i += 9
                i = skipTo(json, i, '[')
                while (i < len && json[i] != ']') {
                    if (json[i] == '"') {
                        val (opt, newIndex) = parseStringValue(json, i + 1)
                        options.add(opt)
                        i = newIndex
                    } else {
                        i++
                    }
                }
                i++
            }

            // –ò—â–µ–º "correct"
            while (i < len && !json.startsWith("\"correct\"", i)) i++
            if (json.startsWith("\"correct\"", i)) {
                i += 9
                while (i < len && json[i] !in "0123456789") i++
                correctIndex = json[i] - '0' - 1 // –¥–µ–ª–∞–µ–º 0-based
            }

            if (options.isNotEmpty()) {
                questions.add(Question(qText.toString(), options, correctIndex))
            }
        } else {
            i++
        }
    }

    return questions
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –∫–∞–≤—ã—á–∫–∞—Ö
fun parseStringValue(json: String, start: Int): Pair<String, Int> {
    var i = start
    val result = StringBuilder()
    while (i < json.length) {
        when (json[i]) {
            '\\' -> {
                if (i + 1 < json.length) {
                    when (json[i + 1]) {
                        'n' -> result.append('\n')
                        't' -> result.append('\t')
                        else -> result.append(json[i + 1])
                    }
                    i += 2
                } else break
            }
            '"' -> return result.toString() to i + 1
            else -> {
                result.append(json[i])
                i++
            }
        }
    }
    return result.toString() to i
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
fun skipTo(json: String, start: Int, char: Char): Int {
    var i = start
    while (i < json.length && json[i] != char) i++
    return i
}
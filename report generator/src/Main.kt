import java.io.File
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val RED = "\u001b[31m"
const val BLUE = "\u001b[34m"

// –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
private const val REPORTS_DIR = "reports"

// –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
private val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")

fun main() {
    // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    File(REPORTS_DIR).mkdirs()

    println("$CYAN=== üìÑ –ì–ï–ù–ï–†–ê–¢–û–† –û–¢–ß–Å–¢–û–í ===$RESET")
    println("–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç!")

    while (true) {
        printMenu()
        when (readLine()?.trim()) {
            "1" -> createReport()
            "2" -> listReports()
            "3" -> readReport()
            "4" -> searchReports()
            "5" -> {
                println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                return
            }
            else -> println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì5$RESET")
        }
    }
}

fun printMenu() {
    println("\n$YELLOW--- –ú–ï–ù–Æ ---$RESET")
    println("1. –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç")
    println("2. –°–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤")
    println("3. –ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç—á—ë—Ç")
    println("4. –ü–æ–∏—Å–∫")
    println("5. –í—ã—Ö–æ–¥")
}

fun createReport() {
    print("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞: ")
    val title = readLine()?.trim()
    if (title.isNullOrBlank()) {
        println("$RED‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.$RESET")
        return
    }

    print("–ê–≤—Ç–æ—Ä: ")
    val author = readLine()?.trim() ?: "–ê–Ω–æ–Ω–∏–º"

    // –°–æ–∑–¥–∞—ë–º —à–∞–±–ª–æ–Ω
    val date = LocalDateTime.now()
    val filename = "${title.replace(Regex("[/\\\\:*?\"<>|]"), "_")}.txt"
    val file = File(REPORTS_DIR, filename)

    if (file.exists()) {
        println("$YELLOW‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (–¥/–Ω)$RESET")
        if (readLine()?.lowercase() !in listOf("–¥", "–¥–∞", "y", "yes")) return
    }

    println("–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ 'END' –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–∞–∑–¥–µ–ª–∞.")

    print("–í–≤–µ–¥–µ–Ω–∏–µ: ")
    val intro = readMultiLine()

    print("–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: ")
    val tasks = readMultiLine()

    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ")
    val results = readMultiLine()

    print("–í—ã–≤–æ–¥—ã: ")
    val conclusions = readMultiLine()

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    val content = """
        # $title
        
        **–ê–≤—Ç–æ—Ä:** $author
        **–î–∞—Ç–∞:** ${date.format(formatter)}
        
        ## –í–≤–µ–¥–µ–Ω–∏–µ
        $intro
        
        ## –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        $tasks
        
        ## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        $results
        
        ## –í—ã–≤–æ–¥—ã
        $conclusions
        
        --- 
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é ReportGen Kotlin
    """.trimIndent()

    try {
        file.writeText(content)
        println("$GREEN‚úÖ –û—Ç—á—ë—Ç '$title' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!$RESET")
    } catch (e: Exception) {
        println("$RED‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}$RESET")
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
fun readMultiLine(): String {
    val lines = mutableListOf<String>()
    while (true) {
        val line = readLine() ?: break
        if (line == "END") break
        lines.add(line)
    }
    return lines.joinToString("\n")
}

fun listReports() {
    val files = File(REPORTS_DIR).listFiles { it.extension == "txt" } ?: emptyArray()
    if (files.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤.$RESET")
        return
    }

    println("\n$CYAN=== –°–ü–ò–°–û–ö –û–¢–ß–Å–¢–û–í ===$RESET")
    files.sortByDescending { it.lastModified() }
    for ((i, file) in files.withIndex()) {
        val title = file.nameWithoutExtension
        val content = file.useLines { it.firstOrNull { it.startsWith("# ") }?.removePrefix("# ") }
            ?: title
        val dateLine = file.useLines { it.elementAtOrNull(2) } ?: ""
        val date = if (dateLine.contains("–î–∞—Ç–∞:")) dateLine.substringAfter("–î–∞—Ç–∞:").trim() else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        println("${i + 1}. $GREEN$content$RESET ‚Äî $date")
    }
}

fun readReport() {
    val files = File(REPORTS_DIR).listFiles { it.extension == "txt" } ?: emptyArray()
    if (files.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤.$RESET")
        return
    }

    listReports()
    print("–ù–æ–º–µ—Ä –æ—Ç—á—ë—Ç–∞: ")
    val index = readLine()?.toIntOrNull()?.minus(1)
    if (index == null || index !in files.indices) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.$RESET")
        return
    }

    val file = files[index]
    println("\n$BLUE--- ${file.nameWithoutExtension} ---$RESET")
    println()
    file.useLines { lines ->
        for (line in lines) {
            val colored = when {
                line.startsWith("# ") -> "$CYAN$line$RESET"
                line.startsWith("## ") -> "$YELLOW$line$RESET"
                line.startsWith("**") -> "$GREEN$line$RESET"
                line.startsWith("---") -> "$BLUE$line$RESET"
                else -> "  $line"
            }
            println(colored)
        }
    }
    println()
}

fun searchReports() {
    val files = File(REPORTS_DIR).listFiles { it.extension == "txt" } ?: emptyArray()
    if (files.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤.$RESET")
        return
    }

    print("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: ")
    val query = readLine()?.trim()?.lowercase() ?: ""
    if (query.isEmpty()) return

    val results = files.filter {
        it.nameWithoutExtension.lowercase().contains(query)
    }

    if (results.isEmpty()) {
        println("$RED‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.$RESET")
    } else {
        println("\n$GREEN=== –ù–ê–ô–î–ï–ù–û (${results.size}) ===$RESET")
        for (file in results) {
            println("üîπ ${file.nameWithoutExtension}")
        }
    }
}
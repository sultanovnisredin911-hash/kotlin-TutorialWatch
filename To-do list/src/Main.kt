import java.io.File

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val RED = "\u001b[31m"
const val STRIKE = "\u001b[9m" // –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
val TASKS_FILE = "tasks.txt"

data class Task(
    val text: String,
    var isDone: Boolean = false
)

fun main() {
    val tasks = loadTasks()
    println("$CYAN=== üìù –ú–ï–ù–ï–î–ñ–ï–† –ó–ê–î–ê–ß ===$RESET")
    println("–£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏!")

    while (true) {
        printMenu()
        when (readLine()?.trim()) {
            "1" -> addTask(tasks)
            "2" -> viewTasks(tasks)
            "3" -> markTaskDone(tasks)
            "4" -> deleteTask(tasks)
            "5" -> {
                println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                break
            }
            else -> println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì5$RESET")
        }
        saveTasks(tasks)
    }
}

fun printMenu() {
    println("\n$YELLOW--- –ú–ï–ù–Æ ---$RESET")
    println("1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    println("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏")
    println("3. –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
    println("4. –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    println("5. –í—ã—Ö–æ–¥")
}

fun addTask(tasks: MutableList<Task>) {
    print("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É: ")
    val text = readLine()?.trim()
    if (text.isNullOrBlank()) {
        println("$RED‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.$RESET")
        return
    }
    tasks.add(Task(text))
    println("$GREEN‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!$RESET")
}

fun viewTasks(tasks: List<Task>) {
    if (tasks.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –∑–∞–¥–∞—á.$RESET")
        return
    }
    println("\n$CYAN=== –í–ê–®–ò –ó–ê–î–ê–ß–ò ===$RESET")
    for (i in tasks.indices) {
        val task = tasks[i]
        val status = if (task.isDone) "$GREEN‚úÖ$RESET" else "$RED‚ùå$RESET"
        val text = if (task.isDone) "$STRIKE${task.text}$RESET" else task.text
        println("${i + 1}. $status $text")
    }
}

fun markTaskDone(tasks: MutableList<Task>) {
    viewTasks(tasks)
    if (tasks.isEmpty()) return

    print("–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏: ")
    val index = readLine()?.toIntOrNull()?.minus(1)
    if (index == null || index !in tasks.indices) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.$RESET")
        return
    }
    tasks[index].isDone = true
    println("$GREENüéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!$RESET")
}

fun deleteTask(tasks: MutableList<Task>) {
    viewTasks(tasks)
    if (tasks.isEmpty()) return

    print("–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    val index = readLine()?.toIntOrNull()?.minus(1)
    if (index == null || index !in tasks.indices) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.$RESET")
        return
    }
    val removed = tasks.removeAt(index)
    println("$YELLOWüóë –£–¥–∞–ª–µ–Ω–æ: '${removed.text}'$RESET")
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
fun loadTasks(): MutableList<Task> {
    val file = File(TASKS_FILE)
    if (!file.exists()) return mutableListOf()

    return file.readLines().mapNotNull { line ->
        if (line.startsWith("DONE:")) {
            Task(line.substring(5), true)
        } else if (line.startsWith("TODO:")) {
            Task(line.substring(5), false)
        } else null
    }.toMutableList()
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
fun saveTasks(tasks: List<Task>) {
    try {
        File(TASKS_FILE).writeText(
            tasks.joinToString("\n") { task ->
                if (task.isDone) "DONE:${task.text}" else "TODO:${task.text}"
            }
        )
    } catch (e: Exception) {
        println("$RED‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏: ${e.message}$RESET")
    }
}
fun main() {
    println("=== üï∑Ô∏è –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π HTML-–ø–∞—Ä—Å–µ—Ä ===")

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
    val html = """
        <html>
          <head>
            <title>GitHub.sultanov.nisredin911@gmail.com</title>
          </head>
          <body>
            <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
            <p>–≠—Ç–æ –º–æ–π <a href="https://Tuc.com">—Å–∞–π—Ç</a>.</p>
            <p>–°–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ç–æ: <img src="cat.jpg" alt="–ö–æ—Ç"></p>
            <a href="https://sult.com">–ú–∞–≥–∞–∑–∏–Ω</a>
            <h2>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h2>
          </body>
        </html>
    """.trimIndent()

    val parser = SimpleHtmlParser(html)

    println("\nüîç –ù–∞–π–¥–µ–Ω–æ:")
    parser.titles.forEach { println("  üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: $it") }
    parser.headings.forEach { (level, text) ->
        println("  üìö H$level: $text")
    }
    parser.links.forEach { (text, url) ->
        println("  üîó –°—Å—ã–ª–∫–∞ [$text]: $url")
    }
    parser.images.forEach { (src, alt) ->
        println("  üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: $src (–ø–æ–¥–ø–∏—Å—å: '$alt')")
    }

    println("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
}

// –ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
class SimpleHtmlParser(private val html: String) {

    val titles = extractAll("<title>", "</title>")
    val headings = mutableListOf<Pair<Int, String>>() // (—É—Ä–æ–≤–µ–Ω—å, —Ç–µ–∫—Å—Ç)
    val links = mutableListOf<Pair<String, String>>()  // (—Ç–µ–∫—Å—Ç, href)
    val images = mutableListOf<Pair<String, String>>() // (src, alt)

    init {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º h1, h2, h3
        for (level in 1..3) {
            val tag = "h$level"
            extractAll("<$tag>", "</$tag>").forEach {
                headings.add(level to it)
            }
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏: <a href="url">—Ç–µ–∫—Å—Ç</a>
        var i = 0
        while (i < html.length) {
            val linkStart = html.indexOf("<a ", i)
            if (linkStart == -1) break

            val hrefStart = html.indexOf("href=\"", linkStart)
            if (hrefStart == -1) break
            val hrefEnd = html.indexOf("\"", hrefStart + 6)
            if (hrefEnd == -1) break
            val url = html.substring(hrefStart + 6, hrefEnd)

            val openTagEnd = html.indexOf(">", hrefEnd)
            if (openTagEnd == -1) break
            val closeTag = "</a>"
            val closeTagPos = html.indexOf(closeTag, openTagEnd)
            if (closeTagPos == -1) break
            val text = html.substring(openTagEnd + 1, closeTagPos)

            links.add(text.trim() to url)
            i = closeTagPos + closeTag.length
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <img src="..." alt="...">
        i = 0
        while (i < html.length) {
            val imgStart = html.indexOf("<img ", i)
            if (imgStart == -1) break

            val srcStart = html.indexOf("src=\"", imgStart)
            val altStart = html.indexOf("alt=\"", imgStart)

            var src = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            var alt = "–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏"

            if (srcStart != -1) {
                val srcEnd = html.indexOf("\"", srcStart + 5)
                if (srcEnd != -1) {
                    src = html.substring(srcStart + 5, srcEnd)
                }
            }

            if (altStart != -1) {
                val altEnd = html.indexOf("\"", altStart + 5)
                if (altEnd != -1) {
                    alt = html.substring(altStart + 5, altEnd)
                }
            }

            images.add(src to alt)
            i = imgStart + 5
        }
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å—ë –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
    private fun extractAll(openTag: String, closeTag: String): List<String> {
        val result = mutableListOf<String>()
        var i = 0
        while (i < html.length) {
            val start = html.indexOf(openTag, i)
            if (start == -1) break
            val end = html.indexOf(closeTag, start + openTag.length)
            if (end == -1) break
            val content = html.substring(start + openTag.length, end)
            result.add(content.trim())
            i = end + closeTag.length
        }
        return result
    }
}
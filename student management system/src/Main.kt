import java.io.File

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val GREEN = "\u001b[32m"
const val YELLOW = "\u001b[33m"
const val CYAN = "\u001b[36m"
const val RED = "\u001b[31m"
const val BLUE = "\u001b[34m"
const val MAGENTA = "\u001b[35m"

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
private const val STUDENTS_FILE = "students.txt"

data class Student(
    var name: String,
    var age: Int,
    var group: String
)

fun main() {
    val students = loadStudents()
    println("$MAGENTA=== üéì –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¢–£–î–ï–ù–¢–ê–ú–ò ===$RESET")
    println("–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ!")

    while (true) {
        printMenu()
        when (readLine()?.trim()) {
            "1" -> addStudent(students)
            "2" -> viewAll(students)
            "3" -> editStudent(students)
            "4" -> deleteStudent(students)
            "5" -> searchStudent(students)
            "6" -> showStats(students)
            "7" -> {
                println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                return
            }
            else -> println("$RED‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì7$RESET")
        }
        saveStudents(students)
    }
}

fun printMenu() {
    println("\n$YELLOW--- –ú–ï–ù–Æ ---$RESET")
    println("1. –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
    println("2. –í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã")
    println("3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
    println("4. –£–¥–∞–ª–∏—Ç—å")
    println("5. –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏")
    println("6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    println("7. –í—ã—Ö–æ–¥")
}

fun addStudent(students: MutableList<Student>) {
    print("–ò–º—è: ")
    val name = readLine()?.trim() ?: ""
    if (name.isEmpty()) {
        println("$RED‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.$RESET")
        return
    }

    print("–í–æ–∑—Ä–∞—Å—Ç: ")
    val age = readLine()?.toIntOrNull()
    if (age == null || age !in 14..100) {
        println("$RED‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 14 –¥–æ 100.$RESET")
        return
    }

    print("–ì—Ä—É–ø–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–¢-11): ")
    val group = readLine()?.trim() ?: ""
    if (group.isEmpty()) {
        println("$RED‚ùå –ì—Ä—É–ø–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.$RESET")
        return
    }

    students.add(Student(name, age, group))
    println("$GREEN‚úÖ –°—Ç—É–¥–µ–Ω—Ç '$name' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É $group!$RESET")
}

fun viewAll(students: List<Student>) {
    if (students.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.$RESET")
        return
    }
    println("\n$CYAN=== –°–ü–ò–°–û–ö –°–¢–£–î–ï–ù–¢–û–í ===$RESET")
    for ((i, s) in students.withIndex()) {
        println("${i + 1}. $s.name, $s.age –ª–µ—Ç, –≥—Ä—É–ø–ø–∞: $s.group")
    }
}

fun editStudent(students: MutableList<Student>) {
    viewAll(students)
    if (students.isEmpty()) return

    print("–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ")
    val index = readLine()?.toIntOrNull()?.minus(1)
    if (index == null || index !in students.indices) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.$RESET")
        return
    }

    val student = students[index]
    println("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${student.name}")

    print("–ù–æ–≤–æ–µ –∏–º—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å): ")
    val name = readLine()?.trim()
    if (!name.isNullOrBlank()) student.name = name

    print("–ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ")
    val ageInput = readLine()?.trim()
    if (ageInput?.isNotBlank() == true) {
        val age = ageInput.toIntOrNull()
        if (age in 14..100) {
            if (age != null) {
                student.age = age
            }
        } else {
            println("$YELLOW –í–æ–∑—Ä–∞—Å—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.$RESET")
        }
    }

    print("–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ")
    val group = readLine()?.trim()
    if (!group.isNullOrBlank()) student.group = group

    println("$GREEN‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!$RESET")
}

fun deleteStudent(students: MutableList<Student>) {
    viewAll(students)
    if (students.isEmpty()) return

    print("–ù–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    val index = readLine()?.toIntOrNull()?.minus(1)
    if (index == null || index !in students.indices) {
        println("$RED‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.$RESET")
        return
    }

    val removed = students.removeAt(index)
    println("$YELLOWüóë –°—Ç—É–¥–µ–Ω—Ç '${removed.name}' —É–¥–∞–ª—ë–Ω.$RESET")
}

fun searchStudent(students: List<Student>) {
    if (students.isEmpty()) {
        println("$YELLOWüìå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.$RESET")
        return
    }

    print("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏: ")
    val query = readLine()?.trim()?.lowercase() ?: ""
    if (query.isEmpty()) return

    val results = students.filter { it.name.lowercase().contains(query) }

    if (results.isEmpty()) {
        println("$RED‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.$RESET")
    } else {
        println("\n$GREEN=== –ù–ê–ô–î–ï–ù–û (${results.size}) ===$RESET")
        for (s in results) {
            println("üîπ ${s.name}, ${s.age} –ª–µ—Ç, –≥—Ä—É–ø–ø–∞: ${s.group}")
        }
    }
}

fun showStats(students: List<Student>) {
    if (students.isEmpty()) {
        println("$YELLOWüìå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.$RESET")
        return
    }

    val byGroup = students.groupingBy { it.group }.eachCount()

    println("\n$BLUE=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ì–†–£–ü–ü–ê–ú ===$RESET")
    var total = 0
    for ((group, count) in byGroup) {
        println("üéì $group: $count —Å—Ç—É–¥–µ–Ω—Ç(–æ–≤)")
        total += count
    }
    println("$MAGENTA –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: $total$RESET")
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
fun loadStudents(): MutableList<Student> {
    val file = File(STUDENTS_FILE)
    if (!file.exists()) return mutableListOf()

    return file.useLines { lines ->
        lines.mapNotNull { line ->
            val parts = line.split("|")
            if (parts.size == 3) {
                val name = parts[0]
                val age = parts[1].toIntOrNull() ?: return@mapNotNull null
                val group = parts[2]
                Student(name, age, group)
            } else null
        }.toMutableList()
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
fun saveStudents(students: List<Student>) {
    try {
        File(STUDENTS_FILE).bufferedWriter().use { writer ->
            for (s in students) {
                writer.write("${s.name}|${s.age}|${s.group}\n")
            }
        }
    } catch (e: Exception) {
        println("$RED‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}$RESET")
    }
}
import kotlin.random.Random

// –¶–≤–µ—Ç–∞
const val RESET = "\u001b[0m"
const val RED = "\u001b[31m"
const val GREEN = "\u001b[32m"
const val BLUE = "\u001b[34m"
const val YELLOW = "\u001b[33m"
const val MAGENTA = "\u001b[35m"

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –≥–µ—Ä–æ—è
abstract class Hero(
    val name: String,
    var health: Int,
    val maxHealth: Int,
    val attack: Int
) {
    abstract fun specialAbility(enemy: Hero): String

    fun takeDamage(damage: Int) {
        health = maxOf(0, health - damage)
    }

    fun isAlive() = health > 0

    fun showStatus() {
        val bar = "‚ñà".repeat((health * 10 / maxHealth))
        val empty = "‚ñë".repeat(10 - bar.length)
        println("$name: $health/$maxHealth HP [$bar$empty]")
    }
}

// –í–æ–∏–Ω
class Warrior(name: String) : Hero(name, 120, 120, 15) {
    private var rage = 0

    override fun specialAbility(enemy: Hero): String {
        if (rage >= 30) {
            val damage = attack * 2
            enemy.takeDamage(damage)
            rage = 0
            return "$REDüí• –Ø—Ä–æ—Å—Ç–Ω–∞—è –∞—Ç–∞–∫–∞! –ù–∞–Ω–µ—Å–µ–Ω–æ $damage —É—Ä–æ–Ω–∞!$RESET"
        }
        rage += 10
        return "üî• –ù–∞–∫–æ–ø–∏–ª —è—Ä–æ—Å—Ç—å ($rage/30). –°–ª–µ–¥—É—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Å–∏–ª—å–Ω–æ–π!"
    }
}

// –ú–∞–≥
class Mage(name: String) : Hero(name, 80, 80, 20) {
    private var mana = 100

    override fun specialAbility(enemy: Hero): String {
        if (mana >= 50) {
            val damage = 40
            enemy.takeDamage(damage)
            mana -= 50
            return "$BLUE‚ö° –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä! –ù–∞–Ω–µ—Å–µ–Ω–æ $damage —É—Ä–æ–Ω–∞!$RESET"
        }
        mana = minOf(100, mana + 30)
        return "üåÄ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –º–∞–Ω—É ($mana/100)"
    }
}

// –õ—É—á–Ω–∏–∫
class Archer(name: String) : Hero(name, 100, 100, 18) {
    private var focus = 0

    override fun specialAbility(enemy: Hero): String {
        if (focus >= 2) {
            val damage = attack * 3
            enemy.takeDamage(damage)
            focus = 0
            return "$GREENüéØ –¢–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª! –ù–∞–Ω–µ—Å–µ–Ω–æ $damage —É—Ä–æ–Ω–∞!$RESET"
        }
        focus++
        return "üéØ –ì–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ç–æ—á–Ω–æ–º—É –≤—ã—Å—Ç—Ä–µ–ª—É... ($focus/2)"
    }
}

fun main() {
    println("$MAGENTA=== ‚öîÔ∏è –ë–ò–¢–í–ê –ì–ï–†–û–ï–í ===$RESET")
    println("–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è!")

    // –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
    print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è: ")
    val playerName = readLine()?.trim() ?: "–ò–≥—Ä–æ–∫"

    println("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:")
    println("1. $RED –í–æ–∏–Ω$RESET (120 HP, —Å–∏–ª—å–Ω—ã–π, —è—Ä–æ—Å—Ç—å)")
    println("2. $BLUE –ú–∞–≥$RESET (80 HP, –º–æ—â–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)")
    println("3. $GREEN –õ—É—á–Ω–∏–∫$RESET (100 HP, —Ç–æ—á–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã)")

    val player = when (readLine()) {
        "1" -> Warrior(playerName)
        "2" -> Mage(playerName)
        "3" -> Archer(playerName)
        else -> {
            println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –°–æ–∑–¥–∞–Ω –í–æ–∏–Ω.")
            Warrior(playerName)
        }
    }

    // –ë–æ—Ç
    val botClasses = listOf(::Warrior, ::Mage, ::Archer)
    val botClass = botClasses.random()
    val bot = botClass("–ë–æ—Ç")

    println("\n$YELLOW –ë–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!$RESET")
    println("${player.name} ($player.javaClass.simpleName) vs ${bot.name} ($bot.javaClass.simpleName)")
    Thread.sleep(1000)

    while (player.isAlive() && bot.isAlive()) {
        // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
        player.showStatus()
        bot.showStatus()
        println("\n$GREEN=== –í–∞—à —Ö–æ–¥ ===$RESET")
        println("1. –û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞")
        println("2. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")

        val choice = readLine()
        when (choice) {
            "1" -> {
                bot.takeDamage(player.attack)
                println("‚öîÔ∏è ${player.name} –∞—Ç–∞–∫—É–µ—Ç! –ù–∞–Ω–µ—Å–µ–Ω–æ ${player.attack} —É—Ä–æ–Ω–∞.")
            }
            "2" -> {
                println(player.specialAbility(bot))
            }
            else -> {
                bot.takeDamage(player.attack)
                println("‚öîÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ö–æ–¥. –û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞: ${player.attack} —É—Ä–æ–Ω–∞.")
            }
        }

        if (!bot.isAlive()) break

        // –•–æ–¥ –±–æ—Ç–∞ (—Å–ª—É—á–∞–π–Ω—ã–π)
        Thread.sleep(800)
        val botChoice = if (Random.nextFloat() < 0.7) 1 else 2
        println("\n$RED=== –•–æ–¥ –±–æ—Ç–∞ ===$RESET")
        when (botChoice) {
            1 -> {
                player.takeDamage(bot.attack)
                println("‚öîÔ∏è ${bot.name} –∞—Ç–∞–∫—É–µ—Ç! –ù–∞–Ω–µ—Å–µ–Ω–æ ${bot.attack} —É—Ä–æ–Ω–∞.")
            }
            2 -> {
                println(bot.specialAbility(player))
            }
        }

        Thread.sleep(1200)
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç
    println("\n$MAGENTA=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===$RESET")
    if (player.isAlive()) {
        println("$GREENüéâ ${player.name} –ø–æ–±–µ–¥–∏–ª!$RESET")
    } else {
        println("$REDüíÄ ${player.name} –ø–æ–≥–∏–±. ${bot.name} –ø–æ–±–µ–¥–∏–ª!$RESET")
    }
}